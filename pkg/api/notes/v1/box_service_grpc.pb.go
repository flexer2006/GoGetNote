// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/notes/v1/box_service.proto

package notesv1

import (
	context "context"
	v1 "gitlab.crja72.ru/golang/2025/spring/course/projects/go9/gogetnote/pkg/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BoxService_CreateBox_FullMethodName         = "/notes.v1.BoxService/CreateBox"
	BoxService_GetBox_FullMethodName            = "/notes.v1.BoxService/GetBox"
	BoxService_ListBoxes_FullMethodName         = "/notes.v1.BoxService/ListBoxes"
	BoxService_UpdateBox_FullMethodName         = "/notes.v1.BoxService/UpdateBox"
	BoxService_DeleteBox_FullMethodName         = "/notes.v1.BoxService/DeleteBox"
	BoxService_AddNoteToBox_FullMethodName      = "/notes.v1.BoxService/AddNoteToBox"
	BoxService_RemoveNoteFromBox_FullMethodName = "/notes.v1.BoxService/RemoveNoteFromBox"
	BoxService_ListBoxNotes_FullMethodName      = "/notes.v1.BoxService/ListBoxNotes"
	BoxService_ListAccessUsers_FullMethodName   = "/notes.v1.BoxService/ListAccessUsers"
	BoxService_GrantAccess_FullMethodName       = "/notes.v1.BoxService/GrantAccess"
	BoxService_UpdateAccess_FullMethodName      = "/notes.v1.BoxService/UpdateAccess"
	BoxService_RevokeAccess_FullMethodName      = "/notes.v1.BoxService/RevokeAccess"
	BoxService_GetBoxError_FullMethodName       = "/notes.v1.BoxService/GetBoxError"
)

// BoxServiceClient is the client API for BoxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BoxService предоставляет методы для работы с боксами (папками) заметок
type BoxServiceClient interface {
	// CreateBox создает новый бокс для заметок
	CreateBox(ctx context.Context, in *CreateBoxRequest, opts ...grpc.CallOption) (*BoxResponse, error)
	// GetBox получает информацию о боксе по ID
	GetBox(ctx context.Context, in *GetBoxRequest, opts ...grpc.CallOption) (*BoxResponse, error)
	// ListBoxes получает список боксов пользователя
	ListBoxes(ctx context.Context, in *ListBoxesRequest, opts ...grpc.CallOption) (*ListBoxesResponse, error)
	// UpdateBox обновляет информацию о боксе
	UpdateBox(ctx context.Context, in *UpdateBoxRequest, opts ...grpc.CallOption) (*BoxResponse, error)
	// DeleteBox удаляет бокс
	DeleteBox(ctx context.Context, in *DeleteBoxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AddNoteToBox добавляет заметку в бокс
	AddNoteToBox(ctx context.Context, in *AddNoteToBoxRequest, opts ...grpc.CallOption) (*BoxNoteResponse, error)
	// RemoveNoteFromBox удаляет заметку из бокса
	RemoveNoteFromBox(ctx context.Context, in *RemoveNoteFromBoxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListBoxNotes получает список заметок в боксе
	ListBoxNotes(ctx context.Context, in *ListBoxNotesRequest, opts ...grpc.CallOption) (*ListBoxNotesResponse, error)
	// ListAccessUsers получает список пользователей с доступом к боксу
	ListAccessUsers(ctx context.Context, in *ListAccessUsersRequest, opts ...grpc.CallOption) (*ListAccessUsersResponse, error)
	// GrantAccess предоставляет доступ к боксу другому пользователю
	GrantAccess(ctx context.Context, in *GrantAccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
	// UpdateAccess изменяет уровень доступа к боксу
	UpdateAccess(ctx context.Context, in *UpdateAccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
	// RevokeAccess отзывает доступ к боксу у пользователя
	RevokeAccess(ctx context.Context, in *RevokeAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetBoxError возвращает стандартизированную ошибку для сервиса боксов
	GetBoxError(ctx context.Context, in *GetBoxErrorRequest, opts ...grpc.CallOption) (*v1.ErrorResponse, error)
}

type boxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoxServiceClient(cc grpc.ClientConnInterface) BoxServiceClient {
	return &boxServiceClient{cc}
}

func (c *boxServiceClient) CreateBox(ctx context.Context, in *CreateBoxRequest, opts ...grpc.CallOption) (*BoxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoxResponse)
	err := c.cc.Invoke(ctx, BoxService_CreateBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) GetBox(ctx context.Context, in *GetBoxRequest, opts ...grpc.CallOption) (*BoxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoxResponse)
	err := c.cc.Invoke(ctx, BoxService_GetBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) ListBoxes(ctx context.Context, in *ListBoxesRequest, opts ...grpc.CallOption) (*ListBoxesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBoxesResponse)
	err := c.cc.Invoke(ctx, BoxService_ListBoxes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) UpdateBox(ctx context.Context, in *UpdateBoxRequest, opts ...grpc.CallOption) (*BoxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoxResponse)
	err := c.cc.Invoke(ctx, BoxService_UpdateBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) DeleteBox(ctx context.Context, in *DeleteBoxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoxService_DeleteBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) AddNoteToBox(ctx context.Context, in *AddNoteToBoxRequest, opts ...grpc.CallOption) (*BoxNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoxNoteResponse)
	err := c.cc.Invoke(ctx, BoxService_AddNoteToBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) RemoveNoteFromBox(ctx context.Context, in *RemoveNoteFromBoxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoxService_RemoveNoteFromBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) ListBoxNotes(ctx context.Context, in *ListBoxNotesRequest, opts ...grpc.CallOption) (*ListBoxNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBoxNotesResponse)
	err := c.cc.Invoke(ctx, BoxService_ListBoxNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) ListAccessUsers(ctx context.Context, in *ListAccessUsersRequest, opts ...grpc.CallOption) (*ListAccessUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessUsersResponse)
	err := c.cc.Invoke(ctx, BoxService_ListAccessUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) GrantAccess(ctx context.Context, in *GrantAccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, BoxService_GrantAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) UpdateAccess(ctx context.Context, in *UpdateAccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, BoxService_UpdateAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) RevokeAccess(ctx context.Context, in *RevokeAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoxService_RevokeAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxServiceClient) GetBoxError(ctx context.Context, in *GetBoxErrorRequest, opts ...grpc.CallOption) (*v1.ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ErrorResponse)
	err := c.cc.Invoke(ctx, BoxService_GetBoxError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxServiceServer is the server API for BoxService service.
// All implementations must embed UnimplementedBoxServiceServer
// for forward compatibility.
//
// BoxService предоставляет методы для работы с боксами (папками) заметок
type BoxServiceServer interface {
	// CreateBox создает новый бокс для заметок
	CreateBox(context.Context, *CreateBoxRequest) (*BoxResponse, error)
	// GetBox получает информацию о боксе по ID
	GetBox(context.Context, *GetBoxRequest) (*BoxResponse, error)
	// ListBoxes получает список боксов пользователя
	ListBoxes(context.Context, *ListBoxesRequest) (*ListBoxesResponse, error)
	// UpdateBox обновляет информацию о боксе
	UpdateBox(context.Context, *UpdateBoxRequest) (*BoxResponse, error)
	// DeleteBox удаляет бокс
	DeleteBox(context.Context, *DeleteBoxRequest) (*emptypb.Empty, error)
	// AddNoteToBox добавляет заметку в бокс
	AddNoteToBox(context.Context, *AddNoteToBoxRequest) (*BoxNoteResponse, error)
	// RemoveNoteFromBox удаляет заметку из бокса
	RemoveNoteFromBox(context.Context, *RemoveNoteFromBoxRequest) (*emptypb.Empty, error)
	// ListBoxNotes получает список заметок в боксе
	ListBoxNotes(context.Context, *ListBoxNotesRequest) (*ListBoxNotesResponse, error)
	// ListAccessUsers получает список пользователей с доступом к боксу
	ListAccessUsers(context.Context, *ListAccessUsersRequest) (*ListAccessUsersResponse, error)
	// GrantAccess предоставляет доступ к боксу другому пользователю
	GrantAccess(context.Context, *GrantAccessRequest) (*AccessResponse, error)
	// UpdateAccess изменяет уровень доступа к боксу
	UpdateAccess(context.Context, *UpdateAccessRequest) (*AccessResponse, error)
	// RevokeAccess отзывает доступ к боксу у пользователя
	RevokeAccess(context.Context, *RevokeAccessRequest) (*emptypb.Empty, error)
	// GetBoxError возвращает стандартизированную ошибку для сервиса боксов
	GetBoxError(context.Context, *GetBoxErrorRequest) (*v1.ErrorResponse, error)
	mustEmbedUnimplementedBoxServiceServer()
}

// UnimplementedBoxServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBoxServiceServer struct{}

func (UnimplementedBoxServiceServer) CreateBox(context.Context, *CreateBoxRequest) (*BoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBox not implemented")
}
func (UnimplementedBoxServiceServer) GetBox(context.Context, *GetBoxRequest) (*BoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBox not implemented")
}
func (UnimplementedBoxServiceServer) ListBoxes(context.Context, *ListBoxesRequest) (*ListBoxesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBoxes not implemented")
}
func (UnimplementedBoxServiceServer) UpdateBox(context.Context, *UpdateBoxRequest) (*BoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBox not implemented")
}
func (UnimplementedBoxServiceServer) DeleteBox(context.Context, *DeleteBoxRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBox not implemented")
}
func (UnimplementedBoxServiceServer) AddNoteToBox(context.Context, *AddNoteToBoxRequest) (*BoxNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNoteToBox not implemented")
}
func (UnimplementedBoxServiceServer) RemoveNoteFromBox(context.Context, *RemoveNoteFromBoxRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNoteFromBox not implemented")
}
func (UnimplementedBoxServiceServer) ListBoxNotes(context.Context, *ListBoxNotesRequest) (*ListBoxNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBoxNotes not implemented")
}
func (UnimplementedBoxServiceServer) ListAccessUsers(context.Context, *ListAccessUsersRequest) (*ListAccessUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessUsers not implemented")
}
func (UnimplementedBoxServiceServer) GrantAccess(context.Context, *GrantAccessRequest) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAccess not implemented")
}
func (UnimplementedBoxServiceServer) UpdateAccess(context.Context, *UpdateAccessRequest) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccess not implemented")
}
func (UnimplementedBoxServiceServer) RevokeAccess(context.Context, *RevokeAccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccess not implemented")
}
func (UnimplementedBoxServiceServer) GetBoxError(context.Context, *GetBoxErrorRequest) (*v1.ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoxError not implemented")
}
func (UnimplementedBoxServiceServer) mustEmbedUnimplementedBoxServiceServer() {}
func (UnimplementedBoxServiceServer) testEmbeddedByValue()                    {}

// UnsafeBoxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoxServiceServer will
// result in compilation errors.
type UnsafeBoxServiceServer interface {
	mustEmbedUnimplementedBoxServiceServer()
}

func RegisterBoxServiceServer(s grpc.ServiceRegistrar, srv BoxServiceServer) {
	// If the following call pancis, it indicates UnimplementedBoxServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BoxService_ServiceDesc, srv)
}

func _BoxService_CreateBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).CreateBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_CreateBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).CreateBox(ctx, req.(*CreateBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_GetBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).GetBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_GetBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).GetBox(ctx, req.(*GetBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_ListBoxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBoxesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).ListBoxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_ListBoxes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).ListBoxes(ctx, req.(*ListBoxesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_UpdateBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).UpdateBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_UpdateBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).UpdateBox(ctx, req.(*UpdateBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_DeleteBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).DeleteBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_DeleteBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).DeleteBox(ctx, req.(*DeleteBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_AddNoteToBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoteToBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).AddNoteToBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_AddNoteToBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).AddNoteToBox(ctx, req.(*AddNoteToBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_RemoveNoteFromBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNoteFromBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).RemoveNoteFromBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_RemoveNoteFromBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).RemoveNoteFromBox(ctx, req.(*RemoveNoteFromBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_ListBoxNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBoxNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).ListBoxNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_ListBoxNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).ListBoxNotes(ctx, req.(*ListBoxNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_ListAccessUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).ListAccessUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_ListAccessUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).ListAccessUsers(ctx, req.(*ListAccessUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_GrantAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).GrantAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_GrantAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).GrantAccess(ctx, req.(*GrantAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_UpdateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).UpdateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_UpdateAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).UpdateAccess(ctx, req.(*UpdateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_RevokeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).RevokeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_RevokeAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).RevokeAccess(ctx, req.(*RevokeAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoxService_GetBoxError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoxErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServiceServer).GetBoxError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoxService_GetBoxError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServiceServer).GetBoxError(ctx, req.(*GetBoxErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoxService_ServiceDesc is the grpc.ServiceDesc for BoxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notes.v1.BoxService",
	HandlerType: (*BoxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBox",
			Handler:    _BoxService_CreateBox_Handler,
		},
		{
			MethodName: "GetBox",
			Handler:    _BoxService_GetBox_Handler,
		},
		{
			MethodName: "ListBoxes",
			Handler:    _BoxService_ListBoxes_Handler,
		},
		{
			MethodName: "UpdateBox",
			Handler:    _BoxService_UpdateBox_Handler,
		},
		{
			MethodName: "DeleteBox",
			Handler:    _BoxService_DeleteBox_Handler,
		},
		{
			MethodName: "AddNoteToBox",
			Handler:    _BoxService_AddNoteToBox_Handler,
		},
		{
			MethodName: "RemoveNoteFromBox",
			Handler:    _BoxService_RemoveNoteFromBox_Handler,
		},
		{
			MethodName: "ListBoxNotes",
			Handler:    _BoxService_ListBoxNotes_Handler,
		},
		{
			MethodName: "ListAccessUsers",
			Handler:    _BoxService_ListAccessUsers_Handler,
		},
		{
			MethodName: "GrantAccess",
			Handler:    _BoxService_GrantAccess_Handler,
		},
		{
			MethodName: "UpdateAccess",
			Handler:    _BoxService_UpdateAccess_Handler,
		},
		{
			MethodName: "RevokeAccess",
			Handler:    _BoxService_RevokeAccess_Handler,
		},
		{
			MethodName: "GetBoxError",
			Handler:    _BoxService_GetBoxError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/notes/v1/box_service.proto",
}
