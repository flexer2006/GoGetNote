// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/notes/v1/sharing_service.proto

package notesv1

import (
	context "context"
	v1 "gitlab.crja72.ru/golang/2025/spring/course/projects/go9/gogetnote/pkg/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SharingService_ShareNote_FullMethodName                = "/notes.v1.SharingService/ShareNote"
	SharingService_UpdateNoteAccess_FullMethodName         = "/notes.v1.SharingService/UpdateNoteAccess"
	SharingService_RevokeNoteAccess_FullMethodName         = "/notes.v1.SharingService/RevokeNoteAccess"
	SharingService_ListNoteAccesses_FullMethodName         = "/notes.v1.SharingService/ListNoteAccesses"
	SharingService_GetMySharedNotes_FullMethodName         = "/notes.v1.SharingService/GetMySharedNotes"
	SharingService_GetNotesSharingHistory_FullMethodName   = "/notes.v1.SharingService/GetNotesSharingHistory"
	SharingService_TransferNoteOwnership_FullMethodName    = "/notes.v1.SharingService/TransferNoteOwnership"
	SharingService_GetSharingError_FullMethodName          = "/notes.v1.SharingService/GetSharingError"
	SharingService_ValidateSharingOperation_FullMethodName = "/notes.v1.SharingService/ValidateSharingOperation"
)

// SharingServiceClient is the client API for SharingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SharingService предоставляет методы для управления совместным доступом к заметкам
type SharingServiceClient interface {
	// ShareNote предоставляет доступ к заметке другому пользователю
	ShareNote(ctx context.Context, in *ShareNoteRequest, opts ...grpc.CallOption) (*ShareNoteResponse, error)
	// UpdateNoteAccess изменяет уровень доступа к заметке
	UpdateNoteAccess(ctx context.Context, in *UpdateNoteAccessRequest, opts ...grpc.CallOption) (*NoteAccessResponse, error)
	// RevokeNoteAccess отзывает доступ к заметке у пользователя
	RevokeNoteAccess(ctx context.Context, in *RevokeNoteAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListNoteAccesses получает список пользователей с доступом к заметке
	ListNoteAccesses(ctx context.Context, in *ListNoteAccessesRequest, opts ...grpc.CallOption) (*ListNoteAccessesResponse, error)
	// GetMySharedNotes получает список заметок, к которым у пользователя есть совместный доступ
	GetMySharedNotes(ctx context.Context, in *GetMySharedNotesRequest, opts ...grpc.CallOption) (*GetMySharedNotesResponse, error)
	// GetNotesSharingHistory получает историю предоставления доступа к заметке
	GetNotesSharingHistory(ctx context.Context, in *GetNotesSharingHistoryRequest, opts ...grpc.CallOption) (*GetNotesSharingHistoryResponse, error)
	// TransferNoteOwnership передает право владения заметкой другому пользователю
	TransferNoteOwnership(ctx context.Context, in *TransferNoteOwnershipRequest, opts ...grpc.CallOption) (*NoteOwnershipResponse, error)
	// GetSharingError возвращает стандартизированную ошибку для сервиса совместного доступа
	GetSharingError(ctx context.Context, in *GetSharingErrorRequest, opts ...grpc.CallOption) (*v1.ErrorResponse, error)
	// ValidateSharingOperation проверяет возможность выполнения операции совместного доступа
	ValidateSharingOperation(ctx context.Context, in *ValidateSharingRequest, opts ...grpc.CallOption) (*ValidateSharingResponse, error)
}

type sharingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSharingServiceClient(cc grpc.ClientConnInterface) SharingServiceClient {
	return &sharingServiceClient{cc}
}

func (c *sharingServiceClient) ShareNote(ctx context.Context, in *ShareNoteRequest, opts ...grpc.CallOption) (*ShareNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareNoteResponse)
	err := c.cc.Invoke(ctx, SharingService_ShareNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharingServiceClient) UpdateNoteAccess(ctx context.Context, in *UpdateNoteAccessRequest, opts ...grpc.CallOption) (*NoteAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteAccessResponse)
	err := c.cc.Invoke(ctx, SharingService_UpdateNoteAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharingServiceClient) RevokeNoteAccess(ctx context.Context, in *RevokeNoteAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SharingService_RevokeNoteAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharingServiceClient) ListNoteAccesses(ctx context.Context, in *ListNoteAccessesRequest, opts ...grpc.CallOption) (*ListNoteAccessesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNoteAccessesResponse)
	err := c.cc.Invoke(ctx, SharingService_ListNoteAccesses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharingServiceClient) GetMySharedNotes(ctx context.Context, in *GetMySharedNotesRequest, opts ...grpc.CallOption) (*GetMySharedNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMySharedNotesResponse)
	err := c.cc.Invoke(ctx, SharingService_GetMySharedNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharingServiceClient) GetNotesSharingHistory(ctx context.Context, in *GetNotesSharingHistoryRequest, opts ...grpc.CallOption) (*GetNotesSharingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotesSharingHistoryResponse)
	err := c.cc.Invoke(ctx, SharingService_GetNotesSharingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharingServiceClient) TransferNoteOwnership(ctx context.Context, in *TransferNoteOwnershipRequest, opts ...grpc.CallOption) (*NoteOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteOwnershipResponse)
	err := c.cc.Invoke(ctx, SharingService_TransferNoteOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharingServiceClient) GetSharingError(ctx context.Context, in *GetSharingErrorRequest, opts ...grpc.CallOption) (*v1.ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ErrorResponse)
	err := c.cc.Invoke(ctx, SharingService_GetSharingError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharingServiceClient) ValidateSharingOperation(ctx context.Context, in *ValidateSharingRequest, opts ...grpc.CallOption) (*ValidateSharingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSharingResponse)
	err := c.cc.Invoke(ctx, SharingService_ValidateSharingOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharingServiceServer is the server API for SharingService service.
// All implementations must embed UnimplementedSharingServiceServer
// for forward compatibility.
//
// SharingService предоставляет методы для управления совместным доступом к заметкам
type SharingServiceServer interface {
	// ShareNote предоставляет доступ к заметке другому пользователю
	ShareNote(context.Context, *ShareNoteRequest) (*ShareNoteResponse, error)
	// UpdateNoteAccess изменяет уровень доступа к заметке
	UpdateNoteAccess(context.Context, *UpdateNoteAccessRequest) (*NoteAccessResponse, error)
	// RevokeNoteAccess отзывает доступ к заметке у пользователя
	RevokeNoteAccess(context.Context, *RevokeNoteAccessRequest) (*emptypb.Empty, error)
	// ListNoteAccesses получает список пользователей с доступом к заметке
	ListNoteAccesses(context.Context, *ListNoteAccessesRequest) (*ListNoteAccessesResponse, error)
	// GetMySharedNotes получает список заметок, к которым у пользователя есть совместный доступ
	GetMySharedNotes(context.Context, *GetMySharedNotesRequest) (*GetMySharedNotesResponse, error)
	// GetNotesSharingHistory получает историю предоставления доступа к заметке
	GetNotesSharingHistory(context.Context, *GetNotesSharingHistoryRequest) (*GetNotesSharingHistoryResponse, error)
	// TransferNoteOwnership передает право владения заметкой другому пользователю
	TransferNoteOwnership(context.Context, *TransferNoteOwnershipRequest) (*NoteOwnershipResponse, error)
	// GetSharingError возвращает стандартизированную ошибку для сервиса совместного доступа
	GetSharingError(context.Context, *GetSharingErrorRequest) (*v1.ErrorResponse, error)
	// ValidateSharingOperation проверяет возможность выполнения операции совместного доступа
	ValidateSharingOperation(context.Context, *ValidateSharingRequest) (*ValidateSharingResponse, error)
	mustEmbedUnimplementedSharingServiceServer()
}

// UnimplementedSharingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSharingServiceServer struct{}

func (UnimplementedSharingServiceServer) ShareNote(context.Context, *ShareNoteRequest) (*ShareNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareNote not implemented")
}
func (UnimplementedSharingServiceServer) UpdateNoteAccess(context.Context, *UpdateNoteAccessRequest) (*NoteAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoteAccess not implemented")
}
func (UnimplementedSharingServiceServer) RevokeNoteAccess(context.Context, *RevokeNoteAccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeNoteAccess not implemented")
}
func (UnimplementedSharingServiceServer) ListNoteAccesses(context.Context, *ListNoteAccessesRequest) (*ListNoteAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNoteAccesses not implemented")
}
func (UnimplementedSharingServiceServer) GetMySharedNotes(context.Context, *GetMySharedNotesRequest) (*GetMySharedNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMySharedNotes not implemented")
}
func (UnimplementedSharingServiceServer) GetNotesSharingHistory(context.Context, *GetNotesSharingHistoryRequest) (*GetNotesSharingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotesSharingHistory not implemented")
}
func (UnimplementedSharingServiceServer) TransferNoteOwnership(context.Context, *TransferNoteOwnershipRequest) (*NoteOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferNoteOwnership not implemented")
}
func (UnimplementedSharingServiceServer) GetSharingError(context.Context, *GetSharingErrorRequest) (*v1.ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharingError not implemented")
}
func (UnimplementedSharingServiceServer) ValidateSharingOperation(context.Context, *ValidateSharingRequest) (*ValidateSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSharingOperation not implemented")
}
func (UnimplementedSharingServiceServer) mustEmbedUnimplementedSharingServiceServer() {}
func (UnimplementedSharingServiceServer) testEmbeddedByValue()                        {}

// UnsafeSharingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharingServiceServer will
// result in compilation errors.
type UnsafeSharingServiceServer interface {
	mustEmbedUnimplementedSharingServiceServer()
}

func RegisterSharingServiceServer(s grpc.ServiceRegistrar, srv SharingServiceServer) {
	// If the following call pancis, it indicates UnimplementedSharingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SharingService_ServiceDesc, srv)
}

func _SharingService_ShareNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).ShareNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharingService_ShareNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).ShareNote(ctx, req.(*ShareNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharingService_UpdateNoteAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).UpdateNoteAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharingService_UpdateNoteAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).UpdateNoteAccess(ctx, req.(*UpdateNoteAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharingService_RevokeNoteAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeNoteAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).RevokeNoteAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharingService_RevokeNoteAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).RevokeNoteAccess(ctx, req.(*RevokeNoteAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharingService_ListNoteAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoteAccessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).ListNoteAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharingService_ListNoteAccesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).ListNoteAccesses(ctx, req.(*ListNoteAccessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharingService_GetMySharedNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMySharedNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).GetMySharedNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharingService_GetMySharedNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).GetMySharedNotes(ctx, req.(*GetMySharedNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharingService_GetNotesSharingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesSharingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).GetNotesSharingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharingService_GetNotesSharingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).GetNotesSharingHistory(ctx, req.(*GetNotesSharingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharingService_TransferNoteOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferNoteOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).TransferNoteOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharingService_TransferNoteOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).TransferNoteOwnership(ctx, req.(*TransferNoteOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharingService_GetSharingError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharingErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).GetSharingError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharingService_GetSharingError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).GetSharingError(ctx, req.(*GetSharingErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharingService_ValidateSharingOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServiceServer).ValidateSharingOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharingService_ValidateSharingOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServiceServer).ValidateSharingOperation(ctx, req.(*ValidateSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SharingService_ServiceDesc is the grpc.ServiceDesc for SharingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SharingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notes.v1.SharingService",
	HandlerType: (*SharingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShareNote",
			Handler:    _SharingService_ShareNote_Handler,
		},
		{
			MethodName: "UpdateNoteAccess",
			Handler:    _SharingService_UpdateNoteAccess_Handler,
		},
		{
			MethodName: "RevokeNoteAccess",
			Handler:    _SharingService_RevokeNoteAccess_Handler,
		},
		{
			MethodName: "ListNoteAccesses",
			Handler:    _SharingService_ListNoteAccesses_Handler,
		},
		{
			MethodName: "GetMySharedNotes",
			Handler:    _SharingService_GetMySharedNotes_Handler,
		},
		{
			MethodName: "GetNotesSharingHistory",
			Handler:    _SharingService_GetNotesSharingHistory_Handler,
		},
		{
			MethodName: "TransferNoteOwnership",
			Handler:    _SharingService_TransferNoteOwnership_Handler,
		},
		{
			MethodName: "GetSharingError",
			Handler:    _SharingService_GetSharingError_Handler,
		},
		{
			MethodName: "ValidateSharingOperation",
			Handler:    _SharingService_ValidateSharingOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/notes/v1/sharing_service.proto",
}
