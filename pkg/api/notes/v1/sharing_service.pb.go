// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: api/notes/v1/sharing_service.proto

package notesv1

import (
	v1 "gitlab.crja72.ru/golang/2025/spring/course/projects/go9/gogetnote/pkg/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Уровень доступа к заметке
type NoteAccessLevel int32

const (
	// Неизвестный уровень доступа (значение по умолчанию)
	NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED NoteAccessLevel = 0
	// Доступ только для чтения
	NoteAccessLevel_NOTE_ACCESS_LEVEL_READ NoteAccessLevel = 1
	// Доступ для чтения и комментирования
	NoteAccessLevel_NOTE_ACCESS_LEVEL_COMMENT NoteAccessLevel = 2
	// Доступ для чтения и редактирования
	NoteAccessLevel_NOTE_ACCESS_LEVEL_EDIT NoteAccessLevel = 3
)

// Enum value maps for NoteAccessLevel.
var (
	NoteAccessLevel_name = map[int32]string{
		0: "NOTE_ACCESS_LEVEL_UNSPECIFIED",
		1: "NOTE_ACCESS_LEVEL_READ",
		2: "NOTE_ACCESS_LEVEL_COMMENT",
		3: "NOTE_ACCESS_LEVEL_EDIT",
	}
	NoteAccessLevel_value = map[string]int32{
		"NOTE_ACCESS_LEVEL_UNSPECIFIED": 0,
		"NOTE_ACCESS_LEVEL_READ":        1,
		"NOTE_ACCESS_LEVEL_COMMENT":     2,
		"NOTE_ACCESS_LEVEL_EDIT":        3,
	}
)

func (x NoteAccessLevel) Enum() *NoteAccessLevel {
	p := new(NoteAccessLevel)
	*p = x
	return p
}

func (x NoteAccessLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoteAccessLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_notes_v1_sharing_service_proto_enumTypes[0].Descriptor()
}

func (NoteAccessLevel) Type() protoreflect.EnumType {
	return &file_api_notes_v1_sharing_service_proto_enumTypes[0]
}

func (x NoteAccessLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NoteAccessLevel.Descriptor instead.
func (NoteAccessLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{0}
}

// Тип события в истории совместного доступа
type SharingEventType int32

const (
	// Неизвестный тип события
	SharingEventType_SHARING_EVENT_TYPE_UNSPECIFIED SharingEventType = 0
	// Предоставление доступа
	SharingEventType_SHARING_EVENT_TYPE_ACCESS_GRANTED SharingEventType = 1
	// Изменение уровня доступа
	SharingEventType_SHARING_EVENT_TYPE_ACCESS_CHANGED SharingEventType = 2
	// Отзыв доступа
	SharingEventType_SHARING_EVENT_TYPE_ACCESS_REVOKED SharingEventType = 3
	// Передача права владения
	SharingEventType_SHARING_EVENT_TYPE_OWNERSHIP_TRANSFERRED SharingEventType = 4
)

// Enum value maps for SharingEventType.
var (
	SharingEventType_name = map[int32]string{
		0: "SHARING_EVENT_TYPE_UNSPECIFIED",
		1: "SHARING_EVENT_TYPE_ACCESS_GRANTED",
		2: "SHARING_EVENT_TYPE_ACCESS_CHANGED",
		3: "SHARING_EVENT_TYPE_ACCESS_REVOKED",
		4: "SHARING_EVENT_TYPE_OWNERSHIP_TRANSFERRED",
	}
	SharingEventType_value = map[string]int32{
		"SHARING_EVENT_TYPE_UNSPECIFIED":           0,
		"SHARING_EVENT_TYPE_ACCESS_GRANTED":        1,
		"SHARING_EVENT_TYPE_ACCESS_CHANGED":        2,
		"SHARING_EVENT_TYPE_ACCESS_REVOKED":        3,
		"SHARING_EVENT_TYPE_OWNERSHIP_TRANSFERRED": 4,
	}
)

func (x SharingEventType) Enum() *SharingEventType {
	p := new(SharingEventType)
	*p = x
	return p
}

func (x SharingEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SharingEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_notes_v1_sharing_service_proto_enumTypes[1].Descriptor()
}

func (SharingEventType) Type() protoreflect.EnumType {
	return &file_api_notes_v1_sharing_service_proto_enumTypes[1]
}

func (x SharingEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SharingEventType.Descriptor instead.
func (SharingEventType) EnumDescriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{1}
}

// Запрос на предоставление доступа к заметке
type ShareNoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID заметки
	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// Email пользователя, которому предоставляется доступ
	UserEmail string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// Уровень доступа к заметке
	AccessLevel NoteAccessLevel `protobuf:"varint,3,opt,name=access_level,json=accessLevel,proto3,enum=notes.v1.NoteAccessLevel" json:"access_level,omitempty"`
	// Персональное сообщение для приглашаемого пользователя (опционально)
	Message *string `protobuf:"bytes,4,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// Если true, будет отправлено уведомление пользователю
	SendNotification bool `protobuf:"varint,5,opt,name=send_notification,json=sendNotification,proto3" json:"send_notification,omitempty"`
	// Если true и заметка находится в боксе, пользователь получит доступ ко всему боксу
	ShareParentBox bool `protobuf:"varint,6,opt,name=share_parent_box,json=shareParentBox,proto3" json:"share_parent_box,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShareNoteRequest) Reset() {
	*x = ShareNoteRequest{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareNoteRequest) ProtoMessage() {}

func (x *ShareNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareNoteRequest.ProtoReflect.Descriptor instead.
func (*ShareNoteRequest) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{0}
}

func (x *ShareNoteRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *ShareNoteRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *ShareNoteRequest) GetAccessLevel() NoteAccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED
}

func (x *ShareNoteRequest) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ShareNoteRequest) GetSendNotification() bool {
	if x != nil {
		return x.SendNotification
	}
	return false
}

func (x *ShareNoteRequest) GetShareParentBox() bool {
	if x != nil {
		return x.ShareParentBox
	}
	return false
}

// Ответ с информацией о предоставленном доступе
type ShareNoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Информация о предоставленном доступе
	Access *NoteAccess `protobuf:"bytes,1,opt,name=access,proto3" json:"access,omitempty"`
	// ID сгенерированного уведомления (если было запрошено)
	NotificationId *string `protobuf:"bytes,2,opt,name=notification_id,json=notificationId,proto3,oneof" json:"notification_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShareNoteResponse) Reset() {
	*x = ShareNoteResponse{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareNoteResponse) ProtoMessage() {}

func (x *ShareNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareNoteResponse.ProtoReflect.Descriptor instead.
func (*ShareNoteResponse) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{1}
}

func (x *ShareNoteResponse) GetAccess() *NoteAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *ShareNoteResponse) GetNotificationId() string {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return ""
}

// Запрос на изменение уровня доступа к заметке
type UpdateNoteAccessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID заметки
	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// ID записи о доступе
	AccessId string `protobuf:"bytes,2,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	// Новый уровень доступа
	AccessLevel NoteAccessLevel `protobuf:"varint,3,opt,name=access_level,json=accessLevel,proto3,enum=notes.v1.NoteAccessLevel" json:"access_level,omitempty"`
	// Если true, будет отправлено уведомление пользователю об изменении уровня доступа
	SendNotification bool `protobuf:"varint,4,opt,name=send_notification,json=sendNotification,proto3" json:"send_notification,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateNoteAccessRequest) Reset() {
	*x = UpdateNoteAccessRequest{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNoteAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNoteAccessRequest) ProtoMessage() {}

func (x *UpdateNoteAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNoteAccessRequest.ProtoReflect.Descriptor instead.
func (*UpdateNoteAccessRequest) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNoteAccessRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *UpdateNoteAccessRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *UpdateNoteAccessRequest) GetAccessLevel() NoteAccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED
}

func (x *UpdateNoteAccessRequest) GetSendNotification() bool {
	if x != nil {
		return x.SendNotification
	}
	return false
}

// Запрос на отзыв доступа к заметке
type RevokeNoteAccessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID заметки
	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// ID записи о доступе
	AccessId string `protobuf:"bytes,2,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	// Если true, будет отправлено уведомление пользователю об отзыве доступа
	SendNotification bool `protobuf:"varint,3,opt,name=send_notification,json=sendNotification,proto3" json:"send_notification,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RevokeNoteAccessRequest) Reset() {
	*x = RevokeNoteAccessRequest{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeNoteAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeNoteAccessRequest) ProtoMessage() {}

func (x *RevokeNoteAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeNoteAccessRequest.ProtoReflect.Descriptor instead.
func (*RevokeNoteAccessRequest) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{3}
}

func (x *RevokeNoteAccessRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *RevokeNoteAccessRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *RevokeNoteAccessRequest) GetSendNotification() bool {
	if x != nil {
		return x.SendNotification
	}
	return false
}

// Запрос на получение списка пользователей с доступом к заметке
type ListNoteAccessesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID заметки
	NoteId        string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNoteAccessesRequest) Reset() {
	*x = ListNoteAccessesRequest{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNoteAccessesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNoteAccessesRequest) ProtoMessage() {}

func (x *ListNoteAccessesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNoteAccessesRequest.ProtoReflect.Descriptor instead.
func (*ListNoteAccessesRequest) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListNoteAccessesRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

// Ответ со списком пользователей с доступом к заметке
type ListNoteAccessesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список пользователей с доступом
	Accesses []*NoteAccess `protobuf:"bytes,1,rep,name=accesses,proto3" json:"accesses,omitempty"`
	// Информация о владельце заметки
	Owner         *NoteOwner `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNoteAccessesResponse) Reset() {
	*x = ListNoteAccessesResponse{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNoteAccessesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNoteAccessesResponse) ProtoMessage() {}

func (x *ListNoteAccessesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNoteAccessesResponse.ProtoReflect.Descriptor instead.
func (*ListNoteAccessesResponse) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListNoteAccessesResponse) GetAccesses() []*NoteAccess {
	if x != nil {
		return x.Accesses
	}
	return nil
}

func (x *ListNoteAccessesResponse) GetOwner() *NoteOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

// Запрос на получение списка заметок, к которым у пользователя есть совместный доступ
type GetMySharedNotesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Максимальное количество заметок для получения
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Смещение для пагинации
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Фильтр по уровню доступа (опционально)
	AccessLevel *NoteAccessLevel `protobuf:"varint,3,opt,name=access_level,json=accessLevel,proto3,enum=notes.v1.NoteAccessLevel,oneof" json:"access_level,omitempty"`
	// Фильтр по пользователю, предоставившему доступ (опционально)
	SharedByUserId *string `protobuf:"bytes,4,opt,name=shared_by_user_id,json=sharedByUserId,proto3,oneof" json:"shared_by_user_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetMySharedNotesRequest) Reset() {
	*x = GetMySharedNotesRequest{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMySharedNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMySharedNotesRequest) ProtoMessage() {}

func (x *GetMySharedNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMySharedNotesRequest.ProtoReflect.Descriptor instead.
func (*GetMySharedNotesRequest) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetMySharedNotesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMySharedNotesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetMySharedNotesRequest) GetAccessLevel() NoteAccessLevel {
	if x != nil && x.AccessLevel != nil {
		return *x.AccessLevel
	}
	return NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED
}

func (x *GetMySharedNotesRequest) GetSharedByUserId() string {
	if x != nil && x.SharedByUserId != nil {
		return *x.SharedByUserId
	}
	return ""
}

// Ответ со списком заметок с совместным доступом
type GetMySharedNotesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список заметок с информацией о доступе
	SharedNotes []*SharedNoteInfo `protobuf:"bytes,1,rep,name=shared_notes,json=sharedNotes,proto3" json:"shared_notes,omitempty"`
	// Общее количество доступных заметок
	TotalCount    int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMySharedNotesResponse) Reset() {
	*x = GetMySharedNotesResponse{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMySharedNotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMySharedNotesResponse) ProtoMessage() {}

func (x *GetMySharedNotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMySharedNotesResponse.ProtoReflect.Descriptor instead.
func (*GetMySharedNotesResponse) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetMySharedNotesResponse) GetSharedNotes() []*SharedNoteInfo {
	if x != nil {
		return x.SharedNotes
	}
	return nil
}

func (x *GetMySharedNotesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Запрос на получение истории предоставления доступа к заметке
type GetNotesSharingHistoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID заметки
	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// Максимальное количество записей для получения
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Смещение для пагинации
	Offset        int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNotesSharingHistoryRequest) Reset() {
	*x = GetNotesSharingHistoryRequest{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNotesSharingHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotesSharingHistoryRequest) ProtoMessage() {}

func (x *GetNotesSharingHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotesSharingHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetNotesSharingHistoryRequest) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetNotesSharingHistoryRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *GetNotesSharingHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNotesSharingHistoryRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Ответ с историей предоставления доступа
type GetNotesSharingHistoryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// События истории
	Events []*SharingHistoryEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// Общее количество событий
	TotalCount    int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNotesSharingHistoryResponse) Reset() {
	*x = GetNotesSharingHistoryResponse{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNotesSharingHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotesSharingHistoryResponse) ProtoMessage() {}

func (x *GetNotesSharingHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotesSharingHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetNotesSharingHistoryResponse) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetNotesSharingHistoryResponse) GetEvents() []*SharingHistoryEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetNotesSharingHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Запрос на передачу права владения заметкой
type TransferNoteOwnershipRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID заметки
	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// ID пользователя, которому передается право владения
	NewOwnerId string `protobuf:"bytes,2,opt,name=new_owner_id,json=newOwnerId,proto3" json:"new_owner_id,omitempty"`
	// Если true, текущий владелец сохранит доступ к заметке с указанным уровнем
	KeepAccess bool `protobuf:"varint,3,opt,name=keep_access,json=keepAccess,proto3" json:"keep_access,omitempty"`
	// Уровень доступа, который сохранит текущий владелец (если keep_access = true)
	RetainedAccessLevel NoteAccessLevel `protobuf:"varint,4,opt,name=retained_access_level,json=retainedAccessLevel,proto3,enum=notes.v1.NoteAccessLevel" json:"retained_access_level,omitempty"`
	// Если true, будет отправлено уведомление новому владельцу
	SendNotification bool `protobuf:"varint,5,opt,name=send_notification,json=sendNotification,proto3" json:"send_notification,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TransferNoteOwnershipRequest) Reset() {
	*x = TransferNoteOwnershipRequest{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferNoteOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferNoteOwnershipRequest) ProtoMessage() {}

func (x *TransferNoteOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferNoteOwnershipRequest.ProtoReflect.Descriptor instead.
func (*TransferNoteOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{10}
}

func (x *TransferNoteOwnershipRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *TransferNoteOwnershipRequest) GetNewOwnerId() string {
	if x != nil {
		return x.NewOwnerId
	}
	return ""
}

func (x *TransferNoteOwnershipRequest) GetKeepAccess() bool {
	if x != nil {
		return x.KeepAccess
	}
	return false
}

func (x *TransferNoteOwnershipRequest) GetRetainedAccessLevel() NoteAccessLevel {
	if x != nil {
		return x.RetainedAccessLevel
	}
	return NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED
}

func (x *TransferNoteOwnershipRequest) GetSendNotification() bool {
	if x != nil {
		return x.SendNotification
	}
	return false
}

// Ответ с информацией о новом владельце
type NoteOwnershipResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Информация о новом владельце
	NewOwner *NoteOwner `protobuf:"bytes,1,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
	// Информация о доступе предыдущего владельца (если он сохранил доступ)
	PreviousOwnerAccess *NoteAccess `protobuf:"bytes,2,opt,name=previous_owner_access,json=previousOwnerAccess,proto3,oneof" json:"previous_owner_access,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NoteOwnershipResponse) Reset() {
	*x = NoteOwnershipResponse{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteOwnershipResponse) ProtoMessage() {}

func (x *NoteOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteOwnershipResponse.ProtoReflect.Descriptor instead.
func (*NoteOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{11}
}

func (x *NoteOwnershipResponse) GetNewOwner() *NoteOwner {
	if x != nil {
		return x.NewOwner
	}
	return nil
}

func (x *NoteOwnershipResponse) GetPreviousOwnerAccess() *NoteAccess {
	if x != nil {
		return x.PreviousOwnerAccess
	}
	return nil
}

// Информация о доступе к заметке
type NoteAccess struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID записи о доступе
	AccessId string `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	// ID заметки
	NoteId string `protobuf:"bytes,2,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// ID пользователя, которому предоставлен доступ
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Email пользователя
	UserEmail string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// Имя пользователя
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// Уровень доступа
	AccessLevel NoteAccessLevel `protobuf:"varint,6,opt,name=access_level,json=accessLevel,proto3,enum=notes.v1.NoteAccessLevel" json:"access_level,omitempty"`
	// ID пользователя, предоставившего доступ
	GrantedByUserId string `protobuf:"bytes,7,opt,name=granted_by_user_id,json=grantedByUserId,proto3" json:"granted_by_user_id,omitempty"`
	// Имя пользователя, предоставившего доступ
	GrantedByUsername string `protobuf:"bytes,8,opt,name=granted_by_username,json=grantedByUsername,proto3" json:"granted_by_username,omitempty"`
	// Время предоставления доступа
	GrantedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=granted_at,json=grantedAt,proto3" json:"granted_at,omitempty"`
	// Время последнего изменения доступа
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoteAccess) Reset() {
	*x = NoteAccess{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteAccess) ProtoMessage() {}

func (x *NoteAccess) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteAccess.ProtoReflect.Descriptor instead.
func (*NoteAccess) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{12}
}

func (x *NoteAccess) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *NoteAccess) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *NoteAccess) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NoteAccess) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *NoteAccess) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NoteAccess) GetAccessLevel() NoteAccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED
}

func (x *NoteAccess) GetGrantedByUserId() string {
	if x != nil {
		return x.GrantedByUserId
	}
	return ""
}

func (x *NoteAccess) GetGrantedByUsername() string {
	if x != nil {
		return x.GrantedByUsername
	}
	return ""
}

func (x *NoteAccess) GetGrantedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GrantedAt
	}
	return nil
}

func (x *NoteAccess) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Информация о владельце заметки
type NoteOwner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID пользователя-владельца
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Email пользователя
	UserEmail string `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// Имя пользователя
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Время, когда пользователь стал владельцем
	OwnerSince    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=owner_since,json=ownerSince,proto3" json:"owner_since,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoteOwner) Reset() {
	*x = NoteOwner{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteOwner) ProtoMessage() {}

func (x *NoteOwner) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteOwner.ProtoReflect.Descriptor instead.
func (*NoteOwner) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{13}
}

func (x *NoteOwner) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NoteOwner) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *NoteOwner) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NoteOwner) GetOwnerSince() *timestamppb.Timestamp {
	if x != nil {
		return x.OwnerSince
	}
	return nil
}

// Информация о заметке с совместным доступом
type SharedNoteInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Основная информация о заметке
	NoteId  string  `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	Title   string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Preview *string `protobuf:"bytes,3,opt,name=preview,proto3,oneof" json:"preview,omitempty"`
	// Информация о владельце заметки
	OwnerId       string `protobuf:"bytes,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	OwnerUsername string `protobuf:"bytes,5,opt,name=owner_username,json=ownerUsername,proto3" json:"owner_username,omitempty"`
	// Информация о доступе текущего пользователя
	AccessLevel     NoteAccessLevel        `protobuf:"varint,6,opt,name=access_level,json=accessLevel,proto3,enum=notes.v1.NoteAccessLevel" json:"access_level,omitempty"`
	AccessGrantedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=access_granted_at,json=accessGrantedAt,proto3" json:"access_granted_at,omitempty"`
	// Время последнего изменения заметки
	LastModifiedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SharedNoteInfo) Reset() {
	*x = SharedNoteInfo{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedNoteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedNoteInfo) ProtoMessage() {}

func (x *SharedNoteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedNoteInfo.ProtoReflect.Descriptor instead.
func (*SharedNoteInfo) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{14}
}

func (x *SharedNoteInfo) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *SharedNoteInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SharedNoteInfo) GetPreview() string {
	if x != nil && x.Preview != nil {
		return *x.Preview
	}
	return ""
}

func (x *SharedNoteInfo) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *SharedNoteInfo) GetOwnerUsername() string {
	if x != nil {
		return x.OwnerUsername
	}
	return ""
}

func (x *SharedNoteInfo) GetAccessLevel() NoteAccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED
}

func (x *SharedNoteInfo) GetAccessGrantedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessGrantedAt
	}
	return nil
}

func (x *SharedNoteInfo) GetLastModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedAt
	}
	return nil
}

// Событие в истории совместного доступа
type SharingHistoryEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID события
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Тип события
	EventType SharingEventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=notes.v1.SharingEventType" json:"event_type,omitempty"`
	// ID заметки
	NoteId string `protobuf:"bytes,3,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// ID пользователя, выполнившего действие
	ActorId string `protobuf:"bytes,4,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// Имя пользователя, выполнившего действие
	ActorUsername string `protobuf:"bytes,5,opt,name=actor_username,json=actorUsername,proto3" json:"actor_username,omitempty"`
	// ID целевого пользователя (кому предоставлен/изменен/отозван доступ)
	TargetUserId string `protobuf:"bytes,6,opt,name=target_user_id,json=targetUserId,proto3" json:"target_user_id,omitempty"`
	// Имя целевого пользователя
	TargetUsername string `protobuf:"bytes,7,opt,name=target_username,json=targetUsername,proto3" json:"target_username,omitempty"`
	// Предыдущий уровень доступа (для события изменения доступа)
	PreviousAccessLevel *NoteAccessLevel `protobuf:"varint,8,opt,name=previous_access_level,json=previousAccessLevel,proto3,enum=notes.v1.NoteAccessLevel,oneof" json:"previous_access_level,omitempty"`
	// Новый уровень доступа (для событий предоставления и изменения доступа)
	NewAccessLevel *NoteAccessLevel `protobuf:"varint,9,opt,name=new_access_level,json=newAccessLevel,proto3,enum=notes.v1.NoteAccessLevel,oneof" json:"new_access_level,omitempty"`
	// Время события
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Дополнительная информация о событии
	Metadata      map[string]string `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SharingHistoryEvent) Reset() {
	*x = SharingHistoryEvent{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharingHistoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharingHistoryEvent) ProtoMessage() {}

func (x *SharingHistoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharingHistoryEvent.ProtoReflect.Descriptor instead.
func (*SharingHistoryEvent) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{15}
}

func (x *SharingHistoryEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *SharingHistoryEvent) GetEventType() SharingEventType {
	if x != nil {
		return x.EventType
	}
	return SharingEventType_SHARING_EVENT_TYPE_UNSPECIFIED
}

func (x *SharingHistoryEvent) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *SharingHistoryEvent) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *SharingHistoryEvent) GetActorUsername() string {
	if x != nil {
		return x.ActorUsername
	}
	return ""
}

func (x *SharingHistoryEvent) GetTargetUserId() string {
	if x != nil {
		return x.TargetUserId
	}
	return ""
}

func (x *SharingHistoryEvent) GetTargetUsername() string {
	if x != nil {
		return x.TargetUsername
	}
	return ""
}

func (x *SharingHistoryEvent) GetPreviousAccessLevel() NoteAccessLevel {
	if x != nil && x.PreviousAccessLevel != nil {
		return *x.PreviousAccessLevel
	}
	return NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED
}

func (x *SharingHistoryEvent) GetNewAccessLevel() NoteAccessLevel {
	if x != nil && x.NewAccessLevel != nil {
		return *x.NewAccessLevel
	}
	return NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED
}

func (x *SharingHistoryEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SharingHistoryEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Ответ с информацией о доступе к заметке
type NoteAccessResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Обновленная информация о доступе
	Access        *NoteAccess `protobuf:"bytes,1,opt,name=access,proto3" json:"access,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoteAccessResponse) Reset() {
	*x = NoteAccessResponse{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteAccessResponse) ProtoMessage() {}

func (x *NoteAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteAccessResponse.ProtoReflect.Descriptor instead.
func (*NoteAccessResponse) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{16}
}

func (x *NoteAccessResponse) GetAccess() *NoteAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

// Запрос на получение ошибки сервиса совместного доступа
type GetSharingErrorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Код ошибки
	ErrorCode v1.ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=common.v1.ErrorCode" json:"error_code,omitempty"`
	// Дополнительные параметры для форматирования сообщения об ошибке
	Params        map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSharingErrorRequest) Reset() {
	*x = GetSharingErrorRequest{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSharingErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharingErrorRequest) ProtoMessage() {}

func (x *GetSharingErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharingErrorRequest.ProtoReflect.Descriptor instead.
func (*GetSharingErrorRequest) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetSharingErrorRequest) GetErrorCode() v1.ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return v1.ErrorCode(0)
}

func (x *GetSharingErrorRequest) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// Запрос на валидацию операции совместного доступа
type ValidateSharingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID заметки
	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// Email пользователя, с которым происходит совместное использование
	TargetEmail string `protobuf:"bytes,2,opt,name=target_email,json=targetEmail,proto3" json:"target_email,omitempty"`
	// Тип операции совместного доступа
	OperationType SharingEventType `protobuf:"varint,3,opt,name=operation_type,json=operationType,proto3,enum=notes.v1.SharingEventType" json:"operation_type,omitempty"`
	// Уровень доступа (для предоставления или изменения доступа)
	AccessLevel   *NoteAccessLevel `protobuf:"varint,4,opt,name=access_level,json=accessLevel,proto3,enum=notes.v1.NoteAccessLevel,oneof" json:"access_level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSharingRequest) Reset() {
	*x = ValidateSharingRequest{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSharingRequest) ProtoMessage() {}

func (x *ValidateSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSharingRequest.ProtoReflect.Descriptor instead.
func (*ValidateSharingRequest) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{18}
}

func (x *ValidateSharingRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *ValidateSharingRequest) GetTargetEmail() string {
	if x != nil {
		return x.TargetEmail
	}
	return ""
}

func (x *ValidateSharingRequest) GetOperationType() SharingEventType {
	if x != nil {
		return x.OperationType
	}
	return SharingEventType_SHARING_EVENT_TYPE_UNSPECIFIED
}

func (x *ValidateSharingRequest) GetAccessLevel() NoteAccessLevel {
	if x != nil && x.AccessLevel != nil {
		return *x.AccessLevel
	}
	return NoteAccessLevel_NOTE_ACCESS_LEVEL_UNSPECIFIED
}

// Ответ на валидацию операции совместного доступа
type ValidateSharingResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Может ли операция быть выполнена
	CanProceed bool `protobuf:"varint,1,opt,name=can_proceed,json=canProceed,proto3" json:"can_proceed,omitempty"`
	// Информация об ошибке (если операция не может быть выполнена)
	Error         *v1.ErrorResponse `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSharingResponse) Reset() {
	*x = ValidateSharingResponse{}
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSharingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSharingResponse) ProtoMessage() {}

func (x *ValidateSharingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_notes_v1_sharing_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSharingResponse.ProtoReflect.Descriptor instead.
func (*ValidateSharingResponse) Descriptor() ([]byte, []int) {
	return file_api_notes_v1_sharing_service_proto_rawDescGZIP(), []int{19}
}

func (x *ValidateSharingResponse) GetCanProceed() bool {
	if x != nil {
		return x.CanProceed
	}
	return false
}

func (x *ValidateSharingResponse) GetError() *v1.ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_api_notes_v1_sharing_service_proto protoreflect.FileDescriptor

const file_api_notes_v1_sharing_service_proto_rawDesc = "" +
	"\n" +
	"\"api/notes/v1/sharing_service.proto\x12\bnotes.v1\x1a api/google/api/annotations.proto\x1a#api/google/protobuf/timestamp.proto\x1a\x1fapi/google/protobuf/empty.proto\x1a\x1aapi/common/v1/errors.proto\"\x8a\x02\n" +
	"\x10ShareNoteRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12\x1d\n" +
	"\n" +
	"user_email\x18\x02 \x01(\tR\tuserEmail\x12<\n" +
	"\faccess_level\x18\x03 \x01(\x0e2\x19.notes.v1.NoteAccessLevelR\vaccessLevel\x12\x1d\n" +
	"\amessage\x18\x04 \x01(\tH\x00R\amessage\x88\x01\x01\x12+\n" +
	"\x11send_notification\x18\x05 \x01(\bR\x10sendNotification\x12(\n" +
	"\x10share_parent_box\x18\x06 \x01(\bR\x0eshareParentBoxB\n" +
	"\n" +
	"\b_message\"\x83\x01\n" +
	"\x11ShareNoteResponse\x12,\n" +
	"\x06access\x18\x01 \x01(\v2\x14.notes.v1.NoteAccessR\x06access\x12,\n" +
	"\x0fnotification_id\x18\x02 \x01(\tH\x00R\x0enotificationId\x88\x01\x01B\x12\n" +
	"\x10_notification_id\"\xba\x01\n" +
	"\x17UpdateNoteAccessRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12\x1b\n" +
	"\taccess_id\x18\x02 \x01(\tR\baccessId\x12<\n" +
	"\faccess_level\x18\x03 \x01(\x0e2\x19.notes.v1.NoteAccessLevelR\vaccessLevel\x12+\n" +
	"\x11send_notification\x18\x04 \x01(\bR\x10sendNotification\"|\n" +
	"\x17RevokeNoteAccessRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12\x1b\n" +
	"\taccess_id\x18\x02 \x01(\tR\baccessId\x12+\n" +
	"\x11send_notification\x18\x03 \x01(\bR\x10sendNotification\"2\n" +
	"\x17ListNoteAccessesRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\"w\n" +
	"\x18ListNoteAccessesResponse\x120\n" +
	"\baccesses\x18\x01 \x03(\v2\x14.notes.v1.NoteAccessR\baccesses\x12)\n" +
	"\x05owner\x18\x02 \x01(\v2\x13.notes.v1.NoteOwnerR\x05owner\"\xe1\x01\n" +
	"\x17GetMySharedNotesRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\x12A\n" +
	"\faccess_level\x18\x03 \x01(\x0e2\x19.notes.v1.NoteAccessLevelH\x00R\vaccessLevel\x88\x01\x01\x12.\n" +
	"\x11shared_by_user_id\x18\x04 \x01(\tH\x01R\x0esharedByUserId\x88\x01\x01B\x0f\n" +
	"\r_access_levelB\x14\n" +
	"\x12_shared_by_user_id\"x\n" +
	"\x18GetMySharedNotesResponse\x12;\n" +
	"\fshared_notes\x18\x01 \x03(\v2\x18.notes.v1.SharedNoteInfoR\vsharedNotes\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\"f\n" +
	"\x1dGetNotesSharingHistoryRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x05R\x06offset\"x\n" +
	"\x1eGetNotesSharingHistoryResponse\x125\n" +
	"\x06events\x18\x01 \x03(\v2\x1d.notes.v1.SharingHistoryEventR\x06events\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\"\xf6\x01\n" +
	"\x1cTransferNoteOwnershipRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12 \n" +
	"\fnew_owner_id\x18\x02 \x01(\tR\n" +
	"newOwnerId\x12\x1f\n" +
	"\vkeep_access\x18\x03 \x01(\bR\n" +
	"keepAccess\x12M\n" +
	"\x15retained_access_level\x18\x04 \x01(\x0e2\x19.notes.v1.NoteAccessLevelR\x13retainedAccessLevel\x12+\n" +
	"\x11send_notification\x18\x05 \x01(\bR\x10sendNotification\"\xb2\x01\n" +
	"\x15NoteOwnershipResponse\x120\n" +
	"\tnew_owner\x18\x01 \x01(\v2\x13.notes.v1.NoteOwnerR\bnewOwner\x12M\n" +
	"\x15previous_owner_access\x18\x02 \x01(\v2\x14.notes.v1.NoteAccessH\x00R\x13previousOwnerAccess\x88\x01\x01B\x18\n" +
	"\x16_previous_owner_access\"\xa7\x03\n" +
	"\n" +
	"NoteAccess\x12\x1b\n" +
	"\taccess_id\x18\x01 \x01(\tR\baccessId\x12\x17\n" +
	"\anote_id\x18\x02 \x01(\tR\x06noteId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"user_email\x18\x04 \x01(\tR\tuserEmail\x12\x1a\n" +
	"\busername\x18\x05 \x01(\tR\busername\x12<\n" +
	"\faccess_level\x18\x06 \x01(\x0e2\x19.notes.v1.NoteAccessLevelR\vaccessLevel\x12+\n" +
	"\x12granted_by_user_id\x18\a \x01(\tR\x0fgrantedByUserId\x12.\n" +
	"\x13granted_by_username\x18\b \x01(\tR\x11grantedByUsername\x129\n" +
	"\n" +
	"granted_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tgrantedAt\x129\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\"\x9c\x01\n" +
	"\tNoteOwner\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"user_email\x18\x02 \x01(\tR\tuserEmail\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12;\n" +
	"\vowner_since\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"ownerSince\"\xf8\x02\n" +
	"\x0eSharedNoteInfo\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1d\n" +
	"\apreview\x18\x03 \x01(\tH\x00R\apreview\x88\x01\x01\x12\x19\n" +
	"\bowner_id\x18\x04 \x01(\tR\aownerId\x12%\n" +
	"\x0eowner_username\x18\x05 \x01(\tR\rownerUsername\x12<\n" +
	"\faccess_level\x18\x06 \x01(\x0e2\x19.notes.v1.NoteAccessLevelR\vaccessLevel\x12F\n" +
	"\x11access_granted_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x0faccessGrantedAt\x12D\n" +
	"\x10last_modified_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x0elastModifiedAtB\n" +
	"\n" +
	"\b_preview\"\xa3\x05\n" +
	"\x13SharingHistoryEvent\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x129\n" +
	"\n" +
	"event_type\x18\x02 \x01(\x0e2\x1a.notes.v1.SharingEventTypeR\teventType\x12\x17\n" +
	"\anote_id\x18\x03 \x01(\tR\x06noteId\x12\x19\n" +
	"\bactor_id\x18\x04 \x01(\tR\aactorId\x12%\n" +
	"\x0eactor_username\x18\x05 \x01(\tR\ractorUsername\x12$\n" +
	"\x0etarget_user_id\x18\x06 \x01(\tR\ftargetUserId\x12'\n" +
	"\x0ftarget_username\x18\a \x01(\tR\x0etargetUsername\x12R\n" +
	"\x15previous_access_level\x18\b \x01(\x0e2\x19.notes.v1.NoteAccessLevelH\x00R\x13previousAccessLevel\x88\x01\x01\x12H\n" +
	"\x10new_access_level\x18\t \x01(\x0e2\x19.notes.v1.NoteAccessLevelH\x01R\x0enewAccessLevel\x88\x01\x01\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12G\n" +
	"\bmetadata\x18\v \x03(\v2+.notes.v1.SharingHistoryEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x18\n" +
	"\x16_previous_access_levelB\x13\n" +
	"\x11_new_access_level\"B\n" +
	"\x12NoteAccessResponse\x12,\n" +
	"\x06access\x18\x01 \x01(\v2\x14.notes.v1.NoteAccessR\x06access\"\xce\x01\n" +
	"\x16GetSharingErrorRequest\x123\n" +
	"\n" +
	"error_code\x18\x01 \x01(\x0e2\x14.common.v1.ErrorCodeR\terrorCode\x12D\n" +
	"\x06params\x18\x02 \x03(\v2,.notes.v1.GetSharingErrorRequest.ParamsEntryR\x06params\x1a9\n" +
	"\vParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xeb\x01\n" +
	"\x16ValidateSharingRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12!\n" +
	"\ftarget_email\x18\x02 \x01(\tR\vtargetEmail\x12A\n" +
	"\x0eoperation_type\x18\x03 \x01(\x0e2\x1a.notes.v1.SharingEventTypeR\roperationType\x12A\n" +
	"\faccess_level\x18\x04 \x01(\x0e2\x19.notes.v1.NoteAccessLevelH\x00R\vaccessLevel\x88\x01\x01B\x0f\n" +
	"\r_access_level\"y\n" +
	"\x17ValidateSharingResponse\x12\x1f\n" +
	"\vcan_proceed\x18\x01 \x01(\bR\n" +
	"canProceed\x123\n" +
	"\x05error\x18\x02 \x01(\v2\x18.common.v1.ErrorResponseH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error*\x8b\x01\n" +
	"\x0fNoteAccessLevel\x12!\n" +
	"\x1dNOTE_ACCESS_LEVEL_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16NOTE_ACCESS_LEVEL_READ\x10\x01\x12\x1d\n" +
	"\x19NOTE_ACCESS_LEVEL_COMMENT\x10\x02\x12\x1a\n" +
	"\x16NOTE_ACCESS_LEVEL_EDIT\x10\x03*\xd9\x01\n" +
	"\x10SharingEventType\x12\"\n" +
	"\x1eSHARING_EVENT_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!SHARING_EVENT_TYPE_ACCESS_GRANTED\x10\x01\x12%\n" +
	"!SHARING_EVENT_TYPE_ACCESS_CHANGED\x10\x02\x12%\n" +
	"!SHARING_EVENT_TYPE_ACCESS_REVOKED\x10\x03\x12,\n" +
	"(SHARING_EVENT_TYPE_OWNERSHIP_TRANSFERRED\x10\x042\xeb\b\n" +
	"\x0eSharingService\x12j\n" +
	"\tShareNote\x12\x1a.notes.v1.ShareNoteRequest\x1a\x1b.notes.v1.ShareNoteResponse\"$\x82\xd3\xe4\x93\x02\x1e:\x01*\"\x19/v1/notes/{note_id}/share\x12\x88\x01\n" +
	"\x10UpdateNoteAccess\x12!.notes.v1.UpdateNoteAccessRequest\x1a\x1c.notes.v1.NoteAccessResponse\"3\x82\xd3\xe4\x93\x02-:\x01*2(/v1/notes/{note_id}/accesses/{access_id}\x12\x7f\n" +
	"\x10RevokeNoteAccess\x12!.notes.v1.RevokeNoteAccessRequest\x1a\x16.google.protobuf.Empty\"0\x82\xd3\xe4\x93\x02**(/v1/notes/{note_id}/accesses/{access_id}\x12\x7f\n" +
	"\x10ListNoteAccesses\x12!.notes.v1.ListNoteAccessesRequest\x1a\".notes.v1.ListNoteAccessesResponse\"$\x82\xd3\xe4\x93\x02\x1e\x12\x1c/v1/notes/{note_id}/accesses\x12{\n" +
	"\x10GetMySharedNotes\x12!.notes.v1.GetMySharedNotesRequest\x1a\".notes.v1.GetMySharedNotesResponse\" \x82\xd3\xe4\x93\x02\x1a\x12\x18/v1/notes/shared/with-me\x12\x98\x01\n" +
	"\x16GetNotesSharingHistory\x12'.notes.v1.GetNotesSharingHistoryRequest\x1a(.notes.v1.GetNotesSharingHistoryResponse\"+\x82\xd3\xe4\x93\x02%\x12#/v1/notes/{note_id}/sharing-history\x12\x93\x01\n" +
	"\x15TransferNoteOwnership\x12&.notes.v1.TransferNoteOwnershipRequest\x1a\x1f.notes.v1.NoteOwnershipResponse\"1\x82\xd3\xe4\x93\x02+:\x01*\"&/v1/notes/{note_id}/transfer-ownership\x12O\n" +
	"\x0fGetSharingError\x12 .notes.v1.GetSharingErrorRequest\x1a\x18.common.v1.ErrorResponse\"\x00\x12a\n" +
	"\x18ValidateSharingOperation\x12 .notes.v1.ValidateSharingRequest\x1a!.notes.v1.ValidateSharingResponse\"\x00B\\ZZgitlab.crja72.ru/golang/2025/spring/course/projects/go9/gogetnote/pkg/api/notes/v1;notesv1b\x06proto3"

var (
	file_api_notes_v1_sharing_service_proto_rawDescOnce sync.Once
	file_api_notes_v1_sharing_service_proto_rawDescData []byte
)

func file_api_notes_v1_sharing_service_proto_rawDescGZIP() []byte {
	file_api_notes_v1_sharing_service_proto_rawDescOnce.Do(func() {
		file_api_notes_v1_sharing_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_notes_v1_sharing_service_proto_rawDesc), len(file_api_notes_v1_sharing_service_proto_rawDesc)))
	})
	return file_api_notes_v1_sharing_service_proto_rawDescData
}

var file_api_notes_v1_sharing_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_notes_v1_sharing_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_notes_v1_sharing_service_proto_goTypes = []any{
	(NoteAccessLevel)(0),                   // 0: notes.v1.NoteAccessLevel
	(SharingEventType)(0),                  // 1: notes.v1.SharingEventType
	(*ShareNoteRequest)(nil),               // 2: notes.v1.ShareNoteRequest
	(*ShareNoteResponse)(nil),              // 3: notes.v1.ShareNoteResponse
	(*UpdateNoteAccessRequest)(nil),        // 4: notes.v1.UpdateNoteAccessRequest
	(*RevokeNoteAccessRequest)(nil),        // 5: notes.v1.RevokeNoteAccessRequest
	(*ListNoteAccessesRequest)(nil),        // 6: notes.v1.ListNoteAccessesRequest
	(*ListNoteAccessesResponse)(nil),       // 7: notes.v1.ListNoteAccessesResponse
	(*GetMySharedNotesRequest)(nil),        // 8: notes.v1.GetMySharedNotesRequest
	(*GetMySharedNotesResponse)(nil),       // 9: notes.v1.GetMySharedNotesResponse
	(*GetNotesSharingHistoryRequest)(nil),  // 10: notes.v1.GetNotesSharingHistoryRequest
	(*GetNotesSharingHistoryResponse)(nil), // 11: notes.v1.GetNotesSharingHistoryResponse
	(*TransferNoteOwnershipRequest)(nil),   // 12: notes.v1.TransferNoteOwnershipRequest
	(*NoteOwnershipResponse)(nil),          // 13: notes.v1.NoteOwnershipResponse
	(*NoteAccess)(nil),                     // 14: notes.v1.NoteAccess
	(*NoteOwner)(nil),                      // 15: notes.v1.NoteOwner
	(*SharedNoteInfo)(nil),                 // 16: notes.v1.SharedNoteInfo
	(*SharingHistoryEvent)(nil),            // 17: notes.v1.SharingHistoryEvent
	(*NoteAccessResponse)(nil),             // 18: notes.v1.NoteAccessResponse
	(*GetSharingErrorRequest)(nil),         // 19: notes.v1.GetSharingErrorRequest
	(*ValidateSharingRequest)(nil),         // 20: notes.v1.ValidateSharingRequest
	(*ValidateSharingResponse)(nil),        // 21: notes.v1.ValidateSharingResponse
	nil,                                    // 22: notes.v1.SharingHistoryEvent.MetadataEntry
	nil,                                    // 23: notes.v1.GetSharingErrorRequest.ParamsEntry
	(*timestamppb.Timestamp)(nil),          // 24: google.protobuf.Timestamp
	(v1.ErrorCode)(0),                      // 25: common.v1.ErrorCode
	(*v1.ErrorResponse)(nil),               // 26: common.v1.ErrorResponse
	(*emptypb.Empty)(nil),                  // 27: google.protobuf.Empty
}
var file_api_notes_v1_sharing_service_proto_depIdxs = []int32{
	0,  // 0: notes.v1.ShareNoteRequest.access_level:type_name -> notes.v1.NoteAccessLevel
	14, // 1: notes.v1.ShareNoteResponse.access:type_name -> notes.v1.NoteAccess
	0,  // 2: notes.v1.UpdateNoteAccessRequest.access_level:type_name -> notes.v1.NoteAccessLevel
	14, // 3: notes.v1.ListNoteAccessesResponse.accesses:type_name -> notes.v1.NoteAccess
	15, // 4: notes.v1.ListNoteAccessesResponse.owner:type_name -> notes.v1.NoteOwner
	0,  // 5: notes.v1.GetMySharedNotesRequest.access_level:type_name -> notes.v1.NoteAccessLevel
	16, // 6: notes.v1.GetMySharedNotesResponse.shared_notes:type_name -> notes.v1.SharedNoteInfo
	17, // 7: notes.v1.GetNotesSharingHistoryResponse.events:type_name -> notes.v1.SharingHistoryEvent
	0,  // 8: notes.v1.TransferNoteOwnershipRequest.retained_access_level:type_name -> notes.v1.NoteAccessLevel
	15, // 9: notes.v1.NoteOwnershipResponse.new_owner:type_name -> notes.v1.NoteOwner
	14, // 10: notes.v1.NoteOwnershipResponse.previous_owner_access:type_name -> notes.v1.NoteAccess
	0,  // 11: notes.v1.NoteAccess.access_level:type_name -> notes.v1.NoteAccessLevel
	24, // 12: notes.v1.NoteAccess.granted_at:type_name -> google.protobuf.Timestamp
	24, // 13: notes.v1.NoteAccess.updated_at:type_name -> google.protobuf.Timestamp
	24, // 14: notes.v1.NoteOwner.owner_since:type_name -> google.protobuf.Timestamp
	0,  // 15: notes.v1.SharedNoteInfo.access_level:type_name -> notes.v1.NoteAccessLevel
	24, // 16: notes.v1.SharedNoteInfo.access_granted_at:type_name -> google.protobuf.Timestamp
	24, // 17: notes.v1.SharedNoteInfo.last_modified_at:type_name -> google.protobuf.Timestamp
	1,  // 18: notes.v1.SharingHistoryEvent.event_type:type_name -> notes.v1.SharingEventType
	0,  // 19: notes.v1.SharingHistoryEvent.previous_access_level:type_name -> notes.v1.NoteAccessLevel
	0,  // 20: notes.v1.SharingHistoryEvent.new_access_level:type_name -> notes.v1.NoteAccessLevel
	24, // 21: notes.v1.SharingHistoryEvent.created_at:type_name -> google.protobuf.Timestamp
	22, // 22: notes.v1.SharingHistoryEvent.metadata:type_name -> notes.v1.SharingHistoryEvent.MetadataEntry
	14, // 23: notes.v1.NoteAccessResponse.access:type_name -> notes.v1.NoteAccess
	25, // 24: notes.v1.GetSharingErrorRequest.error_code:type_name -> common.v1.ErrorCode
	23, // 25: notes.v1.GetSharingErrorRequest.params:type_name -> notes.v1.GetSharingErrorRequest.ParamsEntry
	1,  // 26: notes.v1.ValidateSharingRequest.operation_type:type_name -> notes.v1.SharingEventType
	0,  // 27: notes.v1.ValidateSharingRequest.access_level:type_name -> notes.v1.NoteAccessLevel
	26, // 28: notes.v1.ValidateSharingResponse.error:type_name -> common.v1.ErrorResponse
	2,  // 29: notes.v1.SharingService.ShareNote:input_type -> notes.v1.ShareNoteRequest
	4,  // 30: notes.v1.SharingService.UpdateNoteAccess:input_type -> notes.v1.UpdateNoteAccessRequest
	5,  // 31: notes.v1.SharingService.RevokeNoteAccess:input_type -> notes.v1.RevokeNoteAccessRequest
	6,  // 32: notes.v1.SharingService.ListNoteAccesses:input_type -> notes.v1.ListNoteAccessesRequest
	8,  // 33: notes.v1.SharingService.GetMySharedNotes:input_type -> notes.v1.GetMySharedNotesRequest
	10, // 34: notes.v1.SharingService.GetNotesSharingHistory:input_type -> notes.v1.GetNotesSharingHistoryRequest
	12, // 35: notes.v1.SharingService.TransferNoteOwnership:input_type -> notes.v1.TransferNoteOwnershipRequest
	19, // 36: notes.v1.SharingService.GetSharingError:input_type -> notes.v1.GetSharingErrorRequest
	20, // 37: notes.v1.SharingService.ValidateSharingOperation:input_type -> notes.v1.ValidateSharingRequest
	3,  // 38: notes.v1.SharingService.ShareNote:output_type -> notes.v1.ShareNoteResponse
	18, // 39: notes.v1.SharingService.UpdateNoteAccess:output_type -> notes.v1.NoteAccessResponse
	27, // 40: notes.v1.SharingService.RevokeNoteAccess:output_type -> google.protobuf.Empty
	7,  // 41: notes.v1.SharingService.ListNoteAccesses:output_type -> notes.v1.ListNoteAccessesResponse
	9,  // 42: notes.v1.SharingService.GetMySharedNotes:output_type -> notes.v1.GetMySharedNotesResponse
	11, // 43: notes.v1.SharingService.GetNotesSharingHistory:output_type -> notes.v1.GetNotesSharingHistoryResponse
	13, // 44: notes.v1.SharingService.TransferNoteOwnership:output_type -> notes.v1.NoteOwnershipResponse
	26, // 45: notes.v1.SharingService.GetSharingError:output_type -> common.v1.ErrorResponse
	21, // 46: notes.v1.SharingService.ValidateSharingOperation:output_type -> notes.v1.ValidateSharingResponse
	38, // [38:47] is the sub-list for method output_type
	29, // [29:38] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_api_notes_v1_sharing_service_proto_init() }
func file_api_notes_v1_sharing_service_proto_init() {
	if File_api_notes_v1_sharing_service_proto != nil {
		return
	}
	file_api_notes_v1_sharing_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_api_notes_v1_sharing_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_api_notes_v1_sharing_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_api_notes_v1_sharing_service_proto_msgTypes[11].OneofWrappers = []any{}
	file_api_notes_v1_sharing_service_proto_msgTypes[14].OneofWrappers = []any{}
	file_api_notes_v1_sharing_service_proto_msgTypes[15].OneofWrappers = []any{}
	file_api_notes_v1_sharing_service_proto_msgTypes[18].OneofWrappers = []any{}
	file_api_notes_v1_sharing_service_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_notes_v1_sharing_service_proto_rawDesc), len(file_api_notes_v1_sharing_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_notes_v1_sharing_service_proto_goTypes,
		DependencyIndexes: file_api_notes_v1_sharing_service_proto_depIdxs,
		EnumInfos:         file_api_notes_v1_sharing_service_proto_enumTypes,
		MessageInfos:      file_api_notes_v1_sharing_service_proto_msgTypes,
	}.Build()
	File_api_notes_v1_sharing_service_proto = out.File
	file_api_notes_v1_sharing_service_proto_goTypes = nil
	file_api_notes_v1_sharing_service_proto_depIdxs = nil
}
