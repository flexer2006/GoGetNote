// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/common/v1/errors.proto

package commonv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ErrorService_GetErrorInfo_FullMethodName   = "/common.v1.ErrorService/GetErrorInfo"
	ErrorService_ListErrorCodes_FullMethodName = "/common.v1.ErrorService/ListErrorCodes"
)

// ErrorServiceClient is the client API for ErrorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ErrorService определяет методы для получения информации об ошибках
// Это сервис, который может использоваться клиентами для получения
// подробной информации об ошибках по их кодам
type ErrorServiceClient interface {
	// GetErrorInfo возвращает информацию об ошибке по ее коду
	GetErrorInfo(ctx context.Context, in *GetErrorInfoRequest, opts ...grpc.CallOption) (*GetErrorInfoResponse, error)
	// ListErrorCodes возвращает список всех возможных кодов ошибок
	ListErrorCodes(ctx context.Context, in *ListErrorCodesRequest, opts ...grpc.CallOption) (*ListErrorCodesResponse, error)
}

type errorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorServiceClient(cc grpc.ClientConnInterface) ErrorServiceClient {
	return &errorServiceClient{cc}
}

func (c *errorServiceClient) GetErrorInfo(ctx context.Context, in *GetErrorInfoRequest, opts ...grpc.CallOption) (*GetErrorInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetErrorInfoResponse)
	err := c.cc.Invoke(ctx, ErrorService_GetErrorInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorServiceClient) ListErrorCodes(ctx context.Context, in *ListErrorCodesRequest, opts ...grpc.CallOption) (*ListErrorCodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListErrorCodesResponse)
	err := c.cc.Invoke(ctx, ErrorService_ListErrorCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorServiceServer is the server API for ErrorService service.
// All implementations must embed UnimplementedErrorServiceServer
// for forward compatibility.
//
// ErrorService определяет методы для получения информации об ошибках
// Это сервис, который может использоваться клиентами для получения
// подробной информации об ошибках по их кодам
type ErrorServiceServer interface {
	// GetErrorInfo возвращает информацию об ошибке по ее коду
	GetErrorInfo(context.Context, *GetErrorInfoRequest) (*GetErrorInfoResponse, error)
	// ListErrorCodes возвращает список всех возможных кодов ошибок
	ListErrorCodes(context.Context, *ListErrorCodesRequest) (*ListErrorCodesResponse, error)
	mustEmbedUnimplementedErrorServiceServer()
}

// UnimplementedErrorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedErrorServiceServer struct{}

func (UnimplementedErrorServiceServer) GetErrorInfo(context.Context, *GetErrorInfoRequest) (*GetErrorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrorInfo not implemented")
}
func (UnimplementedErrorServiceServer) ListErrorCodes(context.Context, *ListErrorCodesRequest) (*ListErrorCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListErrorCodes not implemented")
}
func (UnimplementedErrorServiceServer) mustEmbedUnimplementedErrorServiceServer() {}
func (UnimplementedErrorServiceServer) testEmbeddedByValue()                      {}

// UnsafeErrorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorServiceServer will
// result in compilation errors.
type UnsafeErrorServiceServer interface {
	mustEmbedUnimplementedErrorServiceServer()
}

func RegisterErrorServiceServer(s grpc.ServiceRegistrar, srv ErrorServiceServer) {
	// If the following call pancis, it indicates UnimplementedErrorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ErrorService_ServiceDesc, srv)
}

func _ErrorService_GetErrorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetErrorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorServiceServer).GetErrorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorService_GetErrorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorServiceServer).GetErrorInfo(ctx, req.(*GetErrorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorService_ListErrorCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListErrorCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorServiceServer).ListErrorCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorService_ListErrorCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorServiceServer).ListErrorCodes(ctx, req.(*ListErrorCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorService_ServiceDesc is the grpc.ServiceDesc for ErrorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.v1.ErrorService",
	HandlerType: (*ErrorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetErrorInfo",
			Handler:    _ErrorService_GetErrorInfo_Handler,
		},
		{
			MethodName: "ListErrorCodes",
			Handler:    _ErrorService_ListErrorCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/common/v1/errors.proto",
}
