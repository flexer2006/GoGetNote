// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: api/common/v1/pagination.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SortDirection определяет направление сортировки
type SortDirection int32

const (
	// Направление сортировки не указано (используется по умолчанию)
	SortDirection_SORT_DIRECTION_UNSPECIFIED SortDirection = 0
	// Сортировка по возрастанию (A-Z, 0-9)
	SortDirection_SORT_DIRECTION_ASC SortDirection = 1
	// Сортировка по убыванию (Z-A, 9-0)
	SortDirection_SORT_DIRECTION_DESC SortDirection = 2
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "SORT_DIRECTION_UNSPECIFIED",
		1: "SORT_DIRECTION_ASC",
		2: "SORT_DIRECTION_DESC",
	}
	SortDirection_value = map[string]int32{
		"SORT_DIRECTION_UNSPECIFIED": 0,
		"SORT_DIRECTION_ASC":         1,
		"SORT_DIRECTION_DESC":        2,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_v1_pagination_proto_enumTypes[0].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_api_common_v1_pagination_proto_enumTypes[0]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_api_common_v1_pagination_proto_rawDescGZIP(), []int{0}
}

// FilterOperator определяет оператор фильтрации
type FilterOperator int32

const (
	// Оператор не указан (используется равенство по умолчанию)
	FilterOperator_FILTER_OPERATOR_UNSPECIFIED FilterOperator = 0
	// Равенство
	FilterOperator_FILTER_OPERATOR_EQUAL FilterOperator = 1
	// Неравенство
	FilterOperator_FILTER_OPERATOR_NOT_EQUAL FilterOperator = 2
	// Больше чем
	FilterOperator_FILTER_OPERATOR_GREATER_THAN FilterOperator = 3
	// Больше или равно
	FilterOperator_FILTER_OPERATOR_GREATER_THAN_OR_EQUAL FilterOperator = 4
	// Меньше чем
	FilterOperator_FILTER_OPERATOR_LESS_THAN FilterOperator = 5
	// Меньше или равно
	FilterOperator_FILTER_OPERATOR_LESS_THAN_OR_EQUAL FilterOperator = 6
	// Содержит подстроку (для строковых полей)
	FilterOperator_FILTER_OPERATOR_CONTAINS FilterOperator = 7
	// Не содержит подстроку (для строковых полей)
	FilterOperator_FILTER_OPERATOR_NOT_CONTAINS FilterOperator = 8
	// Начинается с (для строковых полей)
	FilterOperator_FILTER_OPERATOR_STARTS_WITH FilterOperator = 9
	// Заканчивается на (для строковых полей)
	FilterOperator_FILTER_OPERATOR_ENDS_WITH FilterOperator = 10
	// В списке значений
	FilterOperator_FILTER_OPERATOR_IN FilterOperator = 11
	// Не в списке значений
	FilterOperator_FILTER_OPERATOR_NOT_IN FilterOperator = 12
)

// Enum value maps for FilterOperator.
var (
	FilterOperator_name = map[int32]string{
		0:  "FILTER_OPERATOR_UNSPECIFIED",
		1:  "FILTER_OPERATOR_EQUAL",
		2:  "FILTER_OPERATOR_NOT_EQUAL",
		3:  "FILTER_OPERATOR_GREATER_THAN",
		4:  "FILTER_OPERATOR_GREATER_THAN_OR_EQUAL",
		5:  "FILTER_OPERATOR_LESS_THAN",
		6:  "FILTER_OPERATOR_LESS_THAN_OR_EQUAL",
		7:  "FILTER_OPERATOR_CONTAINS",
		8:  "FILTER_OPERATOR_NOT_CONTAINS",
		9:  "FILTER_OPERATOR_STARTS_WITH",
		10: "FILTER_OPERATOR_ENDS_WITH",
		11: "FILTER_OPERATOR_IN",
		12: "FILTER_OPERATOR_NOT_IN",
	}
	FilterOperator_value = map[string]int32{
		"FILTER_OPERATOR_UNSPECIFIED":           0,
		"FILTER_OPERATOR_EQUAL":                 1,
		"FILTER_OPERATOR_NOT_EQUAL":             2,
		"FILTER_OPERATOR_GREATER_THAN":          3,
		"FILTER_OPERATOR_GREATER_THAN_OR_EQUAL": 4,
		"FILTER_OPERATOR_LESS_THAN":             5,
		"FILTER_OPERATOR_LESS_THAN_OR_EQUAL":    6,
		"FILTER_OPERATOR_CONTAINS":              7,
		"FILTER_OPERATOR_NOT_CONTAINS":          8,
		"FILTER_OPERATOR_STARTS_WITH":           9,
		"FILTER_OPERATOR_ENDS_WITH":             10,
		"FILTER_OPERATOR_IN":                    11,
		"FILTER_OPERATOR_NOT_IN":                12,
	}
)

func (x FilterOperator) Enum() *FilterOperator {
	p := new(FilterOperator)
	*p = x
	return p
}

func (x FilterOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_v1_pagination_proto_enumTypes[1].Descriptor()
}

func (FilterOperator) Type() protoreflect.EnumType {
	return &file_api_common_v1_pagination_proto_enumTypes[1]
}

func (x FilterOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOperator.Descriptor instead.
func (FilterOperator) EnumDescriptor() ([]byte, []int) {
	return file_api_common_v1_pagination_proto_rawDescGZIP(), []int{1}
}

// Pagination содержит параметры для пагинации списков в запросах
type PaginationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Максимальное количество элементов для получения (размер страницы)
	// По умолчанию: 20, максимум: 100
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Смещение для пагинации (начиная с какого элемента)
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Альтернативный способ пагинации с использованием курсора
	// Курсор представляет собой зашифрованную строку, которая указывает
	// на определенное место в списке. Если задан cursor, параметры
	// limit и offset игнорируются.
	Cursor        *string `protobuf:"bytes,3,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	mi := &file_api_common_v1_pagination_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_v1_pagination_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_api_common_v1_pagination_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationRequest) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

// PaginationResponse содержит метаданные о пагинации для ответов
type PaginationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Общее количество доступных элементов
	TotalCount int32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Смещение, использованное в запросе
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Размер страницы, использованный в запросе
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Есть ли следующая страница
	HasNext bool `protobuf:"varint,4,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	// Есть ли предыдущая страница
	HasPrev bool `protobuf:"varint,5,opt,name=has_prev,json=hasPrev,proto3" json:"has_prev,omitempty"`
	// Номер текущей страницы (начиная с 1)
	Page int32 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	// Общее количество страниц
	TotalPages int32 `protobuf:"varint,7,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	// Курсор для следующей страницы (если доступен)
	NextCursor *string `protobuf:"bytes,8,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
	// Курсор для предыдущей страницы (если доступен)
	PrevCursor    *string `protobuf:"bytes,9,opt,name=prev_cursor,json=prevCursor,proto3,oneof" json:"prev_cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	mi := &file_api_common_v1_pagination_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_v1_pagination_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_api_common_v1_pagination_proto_rawDescGZIP(), []int{1}
}

func (x *PaginationResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *PaginationResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *PaginationResponse) GetHasPrev() bool {
	if x != nil {
		return x.HasPrev
	}
	return false
}

func (x *PaginationResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *PaginationResponse) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

func (x *PaginationResponse) GetPrevCursor() string {
	if x != nil && x.PrevCursor != nil {
		return *x.PrevCursor
	}
	return ""
}

// PageRequest содержит параметры для пагинации с использованием номеров страниц
type PageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Номер страницы (начиная с 1)
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// Количество элементов на странице
	// По умолчанию: 20, максимум: 100
	PageSize      int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	mi := &file_api_common_v1_pagination_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_v1_pagination_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_api_common_v1_pagination_proto_rawDescGZIP(), []int{2}
}

func (x *PageRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// SortField определяет поле и направление сортировки
type SortField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Имя поля для сортировки
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Направление сортировки
	Direction     SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=common.v1.SortDirection" json:"direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortField) Reset() {
	*x = SortField{}
	mi := &file_api_common_v1_pagination_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortField) ProtoMessage() {}

func (x *SortField) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_v1_pagination_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortField.ProtoReflect.Descriptor instead.
func (*SortField) Descriptor() ([]byte, []int) {
	return file_api_common_v1_pagination_proto_rawDescGZIP(), []int{3}
}

func (x *SortField) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SortField) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_SORT_DIRECTION_UNSPECIFIED
}

// SortRequest содержит параметры для сортировки списков
type SortRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список полей для сортировки в порядке приоритета
	SortFields    []*SortField `protobuf:"bytes,1,rep,name=sort_fields,json=sortFields,proto3" json:"sort_fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortRequest) Reset() {
	*x = SortRequest{}
	mi := &file_api_common_v1_pagination_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortRequest) ProtoMessage() {}

func (x *SortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_v1_pagination_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortRequest.ProtoReflect.Descriptor instead.
func (*SortRequest) Descriptor() ([]byte, []int) {
	return file_api_common_v1_pagination_proto_rawDescGZIP(), []int{4}
}

func (x *SortRequest) GetSortFields() []*SortField {
	if x != nil {
		return x.SortFields
	}
	return nil
}

// FilterCondition определяет условие фильтрации
type FilterCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Имя поля для фильтрации
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Оператор фильтрации
	Operator FilterOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=common.v1.FilterOperator" json:"operator,omitempty"`
	// Значение для сравнения
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Список значений (используется с операторами IN и NOT_IN)
	Values        []string `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterCondition) Reset() {
	*x = FilterCondition{}
	mi := &file_api_common_v1_pagination_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCondition) ProtoMessage() {}

func (x *FilterCondition) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_v1_pagination_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCondition.ProtoReflect.Descriptor instead.
func (*FilterCondition) Descriptor() ([]byte, []int) {
	return file_api_common_v1_pagination_proto_rawDescGZIP(), []int{5}
}

func (x *FilterCondition) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FilterCondition) GetOperator() FilterOperator {
	if x != nil {
		return x.Operator
	}
	return FilterOperator_FILTER_OPERATOR_UNSPECIFIED
}

func (x *FilterCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FilterCondition) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// FilterRequest содержит параметры для фильтрации списков
type FilterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список условий фильтрации, объединенных логическим И (AND)
	Conditions    []*FilterCondition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterRequest) Reset() {
	*x = FilterRequest{}
	mi := &file_api_common_v1_pagination_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRequest) ProtoMessage() {}

func (x *FilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_v1_pagination_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRequest.ProtoReflect.Descriptor instead.
func (*FilterRequest) Descriptor() ([]byte, []int) {
	return file_api_common_v1_pagination_proto_rawDescGZIP(), []int{6}
}

func (x *FilterRequest) GetConditions() []*FilterCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

var File_api_common_v1_pagination_proto protoreflect.FileDescriptor

const file_api_common_v1_pagination_proto_rawDesc = "" +
	"\n" +
	"\x1eapi/common/v1/pagination.proto\x12\tcommon.v1\"i\n" +
	"\x11PaginationRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\x12\x1b\n" +
	"\x06cursor\x18\x03 \x01(\tH\x00R\x06cursor\x88\x01\x01B\t\n" +
	"\a_cursor\"\xba\x02\n" +
	"\x12PaginationResponse\x12\x1f\n" +
	"\vtotal_count\x18\x01 \x01(\x05R\n" +
	"totalCount\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x19\n" +
	"\bhas_next\x18\x04 \x01(\bR\ahasNext\x12\x19\n" +
	"\bhas_prev\x18\x05 \x01(\bR\ahasPrev\x12\x12\n" +
	"\x04page\x18\x06 \x01(\x05R\x04page\x12\x1f\n" +
	"\vtotal_pages\x18\a \x01(\x05R\n" +
	"totalPages\x12$\n" +
	"\vnext_cursor\x18\b \x01(\tH\x00R\n" +
	"nextCursor\x88\x01\x01\x12$\n" +
	"\vprev_cursor\x18\t \x01(\tH\x01R\n" +
	"prevCursor\x88\x01\x01B\x0e\n" +
	"\f_next_cursorB\x0e\n" +
	"\f_prev_cursor\">\n" +
	"\vPageRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\"Y\n" +
	"\tSortField\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x126\n" +
	"\tdirection\x18\x02 \x01(\x0e2\x18.common.v1.SortDirectionR\tdirection\"D\n" +
	"\vSortRequest\x125\n" +
	"\vsort_fields\x18\x01 \x03(\v2\x14.common.v1.SortFieldR\n" +
	"sortFields\"\x8c\x01\n" +
	"\x0fFilterCondition\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x125\n" +
	"\boperator\x18\x02 \x01(\x0e2\x19.common.v1.FilterOperatorR\boperator\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x12\x16\n" +
	"\x06values\x18\x04 \x03(\tR\x06values\"K\n" +
	"\rFilterRequest\x12:\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2\x1a.common.v1.FilterConditionR\n" +
	"conditions*`\n" +
	"\rSortDirection\x12\x1e\n" +
	"\x1aSORT_DIRECTION_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12SORT_DIRECTION_ASC\x10\x01\x12\x17\n" +
	"\x13SORT_DIRECTION_DESC\x10\x02*\xb3\x03\n" +
	"\x0eFilterOperator\x12\x1f\n" +
	"\x1bFILTER_OPERATOR_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15FILTER_OPERATOR_EQUAL\x10\x01\x12\x1d\n" +
	"\x19FILTER_OPERATOR_NOT_EQUAL\x10\x02\x12 \n" +
	"\x1cFILTER_OPERATOR_GREATER_THAN\x10\x03\x12)\n" +
	"%FILTER_OPERATOR_GREATER_THAN_OR_EQUAL\x10\x04\x12\x1d\n" +
	"\x19FILTER_OPERATOR_LESS_THAN\x10\x05\x12&\n" +
	"\"FILTER_OPERATOR_LESS_THAN_OR_EQUAL\x10\x06\x12\x1c\n" +
	"\x18FILTER_OPERATOR_CONTAINS\x10\a\x12 \n" +
	"\x1cFILTER_OPERATOR_NOT_CONTAINS\x10\b\x12\x1f\n" +
	"\x1bFILTER_OPERATOR_STARTS_WITH\x10\t\x12\x1d\n" +
	"\x19FILTER_OPERATOR_ENDS_WITH\x10\n" +
	"\x12\x16\n" +
	"\x12FILTER_OPERATOR_IN\x10\v\x12\x1a\n" +
	"\x16FILTER_OPERATOR_NOT_IN\x10\fB^Z\\gitlab.crja72.ru/golang/2025/spring/course/projects/go9/gogetnote/pkg/api/common/v1;commonv1b\x06proto3"

var (
	file_api_common_v1_pagination_proto_rawDescOnce sync.Once
	file_api_common_v1_pagination_proto_rawDescData []byte
)

func file_api_common_v1_pagination_proto_rawDescGZIP() []byte {
	file_api_common_v1_pagination_proto_rawDescOnce.Do(func() {
		file_api_common_v1_pagination_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_common_v1_pagination_proto_rawDesc), len(file_api_common_v1_pagination_proto_rawDesc)))
	})
	return file_api_common_v1_pagination_proto_rawDescData
}

var file_api_common_v1_pagination_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_common_v1_pagination_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_common_v1_pagination_proto_goTypes = []any{
	(SortDirection)(0),         // 0: common.v1.SortDirection
	(FilterOperator)(0),        // 1: common.v1.FilterOperator
	(*PaginationRequest)(nil),  // 2: common.v1.PaginationRequest
	(*PaginationResponse)(nil), // 3: common.v1.PaginationResponse
	(*PageRequest)(nil),        // 4: common.v1.PageRequest
	(*SortField)(nil),          // 5: common.v1.SortField
	(*SortRequest)(nil),        // 6: common.v1.SortRequest
	(*FilterCondition)(nil),    // 7: common.v1.FilterCondition
	(*FilterRequest)(nil),      // 8: common.v1.FilterRequest
}
var file_api_common_v1_pagination_proto_depIdxs = []int32{
	0, // 0: common.v1.SortField.direction:type_name -> common.v1.SortDirection
	5, // 1: common.v1.SortRequest.sort_fields:type_name -> common.v1.SortField
	1, // 2: common.v1.FilterCondition.operator:type_name -> common.v1.FilterOperator
	7, // 3: common.v1.FilterRequest.conditions:type_name -> common.v1.FilterCondition
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_api_common_v1_pagination_proto_init() }
func file_api_common_v1_pagination_proto_init() {
	if File_api_common_v1_pagination_proto != nil {
		return
	}
	file_api_common_v1_pagination_proto_msgTypes[0].OneofWrappers = []any{}
	file_api_common_v1_pagination_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_common_v1_pagination_proto_rawDesc), len(file_api_common_v1_pagination_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_v1_pagination_proto_goTypes,
		DependencyIndexes: file_api_common_v1_pagination_proto_depIdxs,
		EnumInfos:         file_api_common_v1_pagination_proto_enumTypes,
		MessageInfos:      file_api_common_v1_pagination_proto_msgTypes,
	}.Build()
	File_api_common_v1_pagination_proto = out.File
	file_api_common_v1_pagination_proto_goTypes = nil
	file_api_common_v1_pagination_proto_depIdxs = nil
}
