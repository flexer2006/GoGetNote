package request_id_test

import (
	"context"
	"testing"

	"gogetnote/pkg/logger"

	"github.com/stretchr/testify/assert"
)

const (
	msgRequestIDFound        = "should indicate request ID was found"
	msgCorrectRequestID      = "should return the correct request ID"
	msgNoRequestIDFound      = "should indicate no request ID was found"
	msgEmptyWhenNotFound     = "should return empty string when not found"
	msgNonEmptyAutoGenerated = "should return non-empty auto-generated ID"
	msgIDInDerivedContext    = "should find ID in derived context"
	msgIDFromParentContext   = "should return the ID from parent context"
)

type testKeyType struct{}

var testKey = testKeyType{}

func TestGetRequestID(t *testing.T) {
	t.Run("returns request ID when present in context", func(t *testing.T) {
		expectedID := "test-request-id-123"
		ctx := logger.NewRequestIDContext(context.Background(), expectedID)

		retrievedID, ok := logger.GetRequestID(ctx)

		assert.True(t, ok, msgRequestIDFound)
		assert.Equal(t, expectedID, retrievedID, msgCorrectRequestID)
	})

	t.Run("returns false when no request ID in context", func(t *testing.T) {
		ctx := context.Background()

		retrievedID, ok := logger.GetRequestID(ctx)

		assert.False(t, ok, msgNoRequestIDFound)
		assert.Empty(t, retrievedID, msgEmptyWhenNotFound)
	})

	t.Run("handles auto-generated request IDs", func(t *testing.T) {
		ctx := logger.NewRequestIDContext(context.Background(), "")

		retrievedID, ok := logger.GetRequestID(ctx)

		assert.True(t, ok, msgRequestIDFound)
		assert.NotEmpty(t, retrievedID, msgNonEmptyAutoGenerated)
	})

	t.Run("returns same ID for derived contexts", func(t *testing.T) {
		expectedID := "parent-request-id"
		parentCtx := logger.NewRequestIDContext(context.Background(), expectedID)

		childCtx := context.WithValue(parentCtx, testKey, "some-value")

		retrievedID, ok := logger.GetRequestID(childCtx)

		assert.True(t, ok, msgIDInDerivedContext)
		assert.Equal(t, expectedID, retrievedID, msgIDFromParentContext)
	})
}
