syntax = "proto3";

package notes.v1;

import "api/google/api/annotations.proto";
import "api/google/protobuf/timestamp.proto";
import "api/google/protobuf/empty.proto";
import "api/common/v1/pagination.proto";
import "api/common/v1/metadata.proto";
import "api/common/v1/errors.proto";

option go_package = "gitlab.crja72.ru/golang/2025/spring/course/projects/go9/gogetnote/pkg/api/notes/v1;notesv1";

// BoxService предоставляет методы для работы с боксами (папками) заметок
service BoxService {
  // CreateBox создает новый бокс для заметок
  rpc CreateBox(CreateBoxRequest) returns (BoxResponse) {
    option (google.api.http) = {
      post: "/v1/boxes"
      body: "*"
    };
  }

  // GetBox получает информацию о боксе по ID
  rpc GetBox(GetBoxRequest) returns (BoxResponse) {
    option (google.api.http) = {
      get: "/v1/boxes/{box_id}"
    };
  }

  // ListBoxes получает список боксов пользователя
  rpc ListBoxes(ListBoxesRequest) returns (ListBoxesResponse) {
    option (google.api.http) = {
      get: "/v1/boxes"
    };
  }

  // UpdateBox обновляет информацию о боксе
  rpc UpdateBox(UpdateBoxRequest) returns (BoxResponse) {
    option (google.api.http) = {
      patch: "/v1/boxes/{box_id}"
      body: "*"
    };
  }

  // DeleteBox удаляет бокс
  rpc DeleteBox(DeleteBoxRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/boxes/{box_id}"
    };
  }

  // AddNoteToBox добавляет заметку в бокс
  rpc AddNoteToBox(AddNoteToBoxRequest) returns (BoxNoteResponse) {
    option (google.api.http) = {
      post: "/v1/boxes/{box_id}/notes"
      body: "*"
    };
  }

  // RemoveNoteFromBox удаляет заметку из бокса
  rpc RemoveNoteFromBox(RemoveNoteFromBoxRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/boxes/{box_id}/notes/{note_id}"
    };
  }

  // ListBoxNotes получает список заметок в боксе
  rpc ListBoxNotes(ListBoxNotesRequest) returns (ListBoxNotesResponse) {
    option (google.api.http) = {
      get: "/v1/boxes/{box_id}/notes"
    };
  }

  // ListAccessUsers получает список пользователей с доступом к боксу
  rpc ListAccessUsers(ListAccessUsersRequest) returns (ListAccessUsersResponse) {
    option (google.api.http) = {
      get: "/v1/boxes/{box_id}/accesses"
    };
  }

  // GrantAccess предоставляет доступ к боксу другому пользователю
  rpc GrantAccess(GrantAccessRequest) returns (AccessResponse) {
    option (google.api.http) = {
      post: "/v1/boxes/{box_id}/accesses"
      body: "*"
    };
  }

  // UpdateAccess изменяет уровень доступа к боксу
  rpc UpdateAccess(UpdateAccessRequest) returns (AccessResponse) {
    option (google.api.http) = {
      patch: "/v1/boxes/{box_id}/accesses/{access_id}"
      body: "*"
    };
  }

  // RevokeAccess отзывает доступ к боксу у пользователя
  rpc RevokeAccess(RevokeAccessRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/boxes/{box_id}/accesses/{access_id}"
    };
  }
   // GetBoxError возвращает стандартизированную ошибку для сервиса боксов
   rpc GetBoxError(GetBoxErrorRequest) returns (common.v1.ErrorResponse) {}
}

// Уровень доступа к боксу
enum AccessLevel {
  // Неизвестный уровень доступа (значение по умолчанию)
  ACCESS_LEVEL_UNSPECIFIED = 0;
  
  // Доступ только для чтения
  ACCESS_LEVEL_READ = 1;
  
  // Доступ для чтения и записи (редактирования)
  ACCESS_LEVEL_WRITE = 2;
  
  // Полный доступ, включая управление доступом других пользователей
  ACCESS_LEVEL_ADMIN = 3;
}

// Тип бокса
enum BoxType {
  // Неизвестный тип бокса (значение по умолчанию)
  BOX_TYPE_UNSPECIFIED = 0;
  
  // Обычный бокс, созданный пользователем
  BOX_TYPE_REGULAR = 1;
  
  // Корневой бокс (автоматически создается для каждого пользователя)
  BOX_TYPE_ROOT = 2;
  
  // Системный бокс (например, Архив, Корзина)
  BOX_TYPE_SYSTEM = 3;
  
  // Совместный бокс (к которому имеют доступ несколько пользователей)
  BOX_TYPE_SHARED = 4;
}

// Запрос на создание бокса
message CreateBoxRequest {
  // Название бокса
  string name = 1;
  
  // Описание бокса (опционально)
  optional string description = 2;
  
  // Цвет бокса (HEX код, например "#4285F4" для синего)
  optional string color = 3;
  
  // Родительский бокс, в котором будет создан новый бокс (опционально)
  optional string parent_box_id = 4;
  
  // Иконка бокса (опционально)
  optional string icon = 5;
  
  // Дополнительные метаданные бокса
  map<string, string> metadata = 6;
  
  // Пользовательские теги для бокса
  repeated string tags = 7;
  
  // Приоритет бокса (от 0 до 100)
  optional int32 priority = 8;
  
  // Пользовательские поля
  repeated common.v1.UserDefinedField user_defined_fields = 9;
}

// Запрос на получение бокса
message GetBoxRequest {
  // ID бокса
  string box_id = 1;
}

// Запрос на получение списка боксов
message ListBoxesRequest {
  // Параметры пагинации
  common.v1.PaginationRequest pagination = 1;
  
  // Фильтр по типу боксов
  optional BoxType type = 2;
  
  // Фильтр по родительскому боксу (если указан, возвращаются только боксы внутри указанного)
  optional string parent_box_id = 3;
  
  // Включать ли в ответ совместные боксы
  bool include_shared = 4;
  
  // Параметры сортировки
  common.v1.SortRequest sort = 5;
}

// Ответ со списком боксов
message ListBoxesResponse {
  // Список боксов
  repeated Box boxes = 1;
  
  // Метаданные пагинации
  common.v1.PaginationResponse pagination = 2;
}

// Запрос на обновление бокса
message UpdateBoxRequest {
  // ID бокса для обновления
  string box_id = 1;
  
  // Новое название бокса (опционально)
  optional string name = 2;
  
  // Новое описание бокса (опционально)
  optional string description = 3;
  
  // Новый цвет бокса (опционально)
  optional string color = 4;
  
  // Новый родительский бокс (опционально)
  optional string parent_box_id = 5;
  
  // Новая иконка бокса (опционально)
  optional string icon = 6;
  
  // Дополнительные метаданные бокса (опционально)
  map<string, string> metadata = 7;
}

// Запрос на удаление бокса
message DeleteBoxRequest {
  // ID бокса для удаления
  string box_id = 1;
  
  // Удалять ли содержимое бокса (заметки) или только удалить бокс
  bool delete_contents = 2;
}

// Запрос на добавление заметки в бокс
message AddNoteToBoxRequest {
  // ID бокса, в который нужно добавить заметку
  string box_id = 1;
  
  // ID заметки, которую нужно добавить
  string note_id = 2;
}

// Запрос на удаление заметки из бокса
message RemoveNoteFromBoxRequest {
  // ID бокса, из которого нужно удалить заметку
  string box_id = 1;
  
  // ID заметки, которую нужно удалить
  string note_id = 2;
}

// Запрос на получение списка заметок в боксе
message ListBoxNotesRequest {
  // ID бокса
  string box_id = 1;
  
  // Параметры пагинации
  common.v1.PaginationRequest pagination = 2;
  
  // Параметры сортировки
  common.v1.SortRequest sort = 3;
  
  // Фильтр по тегам заметок
  repeated string tags = 4;
}

// Ответ со списком заметок в боксе
message ListBoxNotesResponse {
  // Список заметок
  repeated BoxNote notes = 1;
  
  // Метаданные пагинации
  common.v1.PaginationResponse pagination = 2;
}

// Запрос на получение списка пользователей с доступом к боксу
message ListAccessUsersRequest {
  // ID бокса
  string box_id = 1;
}

// Ответ со списком пользователей с доступом к боксу
message ListAccessUsersResponse {
  // Список пользователей с доступом
  repeated AccessUser access_users = 1;
}

// Запрос на предоставление доступа к боксу другому пользователю
message GrantAccessRequest {
  // ID бокса
  string box_id = 1;
  
  // Email пользователя, которому предоставляется доступ
  string user_email = 2;
  
  // Уровень доступа
  AccessLevel access_level = 3;
  
  // Персональное сообщение для пользователя (опционально)
  optional string message = 4;
}

// Запрос на изменение уровня доступа к боксу
message UpdateAccessRequest {
  // ID бокса
  string box_id = 1;
  
  // ID записи о доступе
  string access_id = 2;
  
  // Новый уровень доступа
  AccessLevel access_level = 3;
}

// Запрос на отзыв доступа к боксу
message RevokeAccessRequest {
  // ID бокса
  string box_id = 1;
  
  // ID записи о доступе
  string access_id = 2;
}

// Структура бокса
message Box {
  // Уникальный идентификатор бокса
  string box_id = 1;
  
  // ID пользователя, создавшего бокс
  string user_id = 2;
  
  // Название бокса
  string name = 3;
  
  // Описание бокса
  string description = 4;
  
  // Тип бокса
  BoxType type = 5;
  
  // Цвет бокса (HEX код)
  string color = 6;
  
  // Иконка бокса
  string icon = 7;
  
  // ID родительского бокса (если это вложенный бокс)
  optional string parent_box_id = 8;
  
  // Количество заметок в боксе
  int32 note_count = 9;
  
  // Уровень доступа текущего пользователя к этому боксу
  AccessLevel current_user_access_level = 10;
  
  // Общие метаданные объекта
  common.v1.Metadata metadata = 11;
  
  // Дополнительные метаданные
  map<string, string> custom_attributes = 12;
}

// Структура заметки в боксе (упрощенная версия заметки)
message BoxNote {
  // ID заметки
  string note_id = 1;
  
  // Заголовок заметки
  string title = 2;
  
  // Предпросмотр содержимого заметки (обрезанный текст)
  string preview = 3;
  
  // Время добавления заметки в бокс
  google.protobuf.Timestamp added_at = 4;
}

// Информация о доступе пользователя к боксу
message AccessUser {
  // ID записи о доступе
  string access_id = 1;
  
  // ID пользователя
  string user_id = 2;
  
  // Email пользователя
  string email = 3;
  
  // Имя пользователя
  string username = 4;
  
  // Уровень доступа
  AccessLevel access_level = 5;
  
  // Время предоставления доступа
  google.protobuf.Timestamp granted_at = 6;
  
  // Время последнего изменения доступа
  google.protobuf.Timestamp updated_at = 7;
}

// Ответ с информацией о боксе
message BoxResponse {
  // Бокс
  Box box = 1;
}

// Ответ на добавление заметки в бокс
message BoxNoteResponse {
  // ID бокса
  string box_id = 1;
  
  // ID заметки
  string note_id = 2;
  
  // Статус операции
  bool success = 3;
}

// Ответ с информацией о доступе
message AccessResponse {
  // Информация о предоставленном доступе
  AccessUser access = 1;
}

// Запрос на получение ошибки сервиса боксов
message GetBoxErrorRequest {
  // Код ошибки
  common.v1.ErrorCode error_code = 1;
  
  // Дополнительные параметры для форматирования сообщения об ошибке
  map<string, string> params = 2;
}