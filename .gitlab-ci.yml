image: golang:1.24.2

stages:
  - test
  - build
  - deploy

variables:
  GO111MODULE: "on"
  GOPATH: $CI_PROJECT_DIR/.cache/go-build
  TEST_COVERAGE_THRESHOLD: 30
  MICROSERVICES_PATHS: "./internal/auth/... ./internal/notes/..."

cache:
  paths:
    - .cache/go-build

before_script:
  - mkdir -p .cache/go-build
  - go mod download

test:
  stage: test
  script:
    - apt-get update && apt-get install -y bc
    - go test -v -race $MICROSERVICES_PATHS
    - go test -coverprofile=coverage.txt -covermode=atomic $MICROSERVICES_PATHS
    - go tool cover -func=coverage.txt
    - |
      COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print substr($3, 1, length($3)-1)}')
      echo "Total microservice coverage: $COVERAGE%"
      if (( $(echo "$COVERAGE < $TEST_COVERAGE_THRESHOLD" | bc -l) )); then
        echo "❌ Test coverage ($COVERAGE%) is below threshold of $TEST_COVERAGE_THRESHOLD%"
        exit 1
      fi
  artifacts:
    paths:
      - coverage.txt
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

build:
  stage: build
  script:
    - mkdir -p bin
    - GOOS=linux GOARCH=amd64 go build -o bin/auth-service ./cmd/auth/...
    - GOOS=linux GOARCH=amd64 go build -o bin/notes-service ./cmd/notes/...
    - GOOS=linux GOARCH=amd64 go build -o bin/gateway-service ./cmd/gateway/...
  artifacts:
    paths:
      - bin/
    expire_in: 1 week
  only:
    - main
    - develop
    - tags

deploy-staging:
  stage: deploy
  script:
    - echo "Deploying to staging environment..."
  environment:
    name: staging
  only:
    - develop
  when: manual

deploy-production:
  stage: deploy
  script:
    - echo "Deploying to production environment..."
  environment:
    name: production
  only:
    - main
    - tags
  when: manual